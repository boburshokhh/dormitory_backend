const telegramLogger = require('../services/telegramLoggerService')
const { logger } = require('../utils/logger')

// Middleware –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const terminalTelegramRequestLogger = (req, res, next) => {
  const start = Date.now()
  const requestId = generateRequestId()

  // –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–ø—Ä–æ—Å–∞ –∫ –æ–±—ä–µ–∫—Ç—É –∑–∞–ø—Ä–æ—Å–∞
  req.requestId = requestId

  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
  if (telegramLogger.terminalMode) {
    telegramLogger.logRequestStart(req.method, req.originalUrl, {
      requestId,
      ip: req.ip,
      userAgent: req.headers['user-agent'],
      userId: req.user?.id || 'anonymous',
    })
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
  const requestData = {
    requestId,
    method: req.method,
    url: req.originalUrl,
    ip: req.ip,
    userAgent: req.headers['user-agent'],
    userId: req.user?.id || 'anonymous',
    userRole: req.user?.role || 'anonymous',
    timestamp: new Date().toISOString(),
  }
  logger.info('HTTP Request Started', requestData)

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  const originalSend = res.send
  res.send = function (data) {
    const duration = Date.now() - start
    const responseData = {
      ...requestData,
      statusCode: res.statusCode,
      duration: `${duration}ms`,
      contentLength: data ? data.length : 0,
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–∞–π–ª
    logger.info('HTTP Request Completed', responseData)

    // –õ–æ–≥–∏—Ä—É–µ–º –≤ Telegram (—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
    if (telegramLogger.terminalMode) {
      telegramLogger.logRequestEnd(req.method, req.originalUrl, res.statusCode, duration, {
        requestId,
        ip: req.ip,
        userId: req.user?.id,
        userRole: req.user?.role,
      })
    }

    return originalSend.call(this, data)
  }

  next()
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ
const terminalTelegramErrorLogger = (err, req, res, next) => {
  const errorData = {
    requestId: req.requestId,
    message: err.message,
    stack: err.stack,
    route: `${req.method} ${req.originalUrl}`,
    userId: req.user?.id || 'anonymous',
    userRole: req.user?.role || 'anonymous',
    ip: req.ip,
    userAgent: req.headers['user-agent'],
    timestamp: new Date().toISOString(),
  }

  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Ñ–∞–π–ª
  logger.error('Application Error', errorData)

  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ Telegram (—Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º)
  if (telegramLogger.terminalMode) {
    telegramLogger.logError(`Application Error: ${err.message}`, {
      requestId: req.requestId,
      route: `${req.method} ${req.originalUrl}`,
      userId: req.user?.id,
      ip: req.ip,
      error: err.message,
    })
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
  if (!res.headersSent) {
    const statusCode = err.status || err.statusCode || 500
    const message =
      statusCode === 500 ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' : err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'

    res.status(statusCode).json({
      error: message,
      requestId: req.requestId,
      ...(process.env.NODE_ENV === 'development' && {
        details: err.message,
        stack: err.stack,
      }),
    })
  }

  next()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SQL –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const logSqlQuery = (query, duration, context = {}) => {
  if (telegramLogger.terminalMode) {
    telegramLogger.logSqlQuery(query, duration, context)
  }
}

// –ü–∞—Ç—á–∏–º console.log –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
const originalConsoleLog = console.log
console.log = function (...args) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ SQL –ª–æ–≥–æ–º
  const message = args.join(' ')
  if (message.includes('üîç SQL:')) {
    const sqlMatch = message.match(/üîç SQL: (.+) \| (\d+)ms/)
    if (sqlMatch && telegramLogger.terminalMode) {
      const [, query, duration] = sqlMatch
      telegramLogger.logSqlQuery(query, parseInt(duration))
    }
  }

  // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π console.log
  originalConsoleLog.apply(console, args)
}

// –£—Ç–∏–ª–∏—Ç—ã

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –∑–∞–ø—Ä–æ—Å–∞
function generateRequestId() {
  return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
}

module.exports = {
  terminalTelegramRequestLogger,
  terminalTelegramErrorLogger,
  logSqlQuery,
}
