const Minio = require('minio')
require('dotenv').config({ path: './config.env' })

// –°–æ–∑–¥–∞–Ω–∏–µ MinIO –∫–ª–∏–µ–Ω—Ç–∞
const minioClient = new Minio.Client({
  endPoint: process.env.MINIO_ENDPOINT || '192.168.13.19',
  port: parseInt(process.env.MINIO_PORT) || 9000,
  useSSL: process.env.MINIO_USE_SSL === 'true',
  accessKey: process.env.MINIO_ACCESS_KEY || 'minioadmin',
  secretKey: process.env.MINIO_SECRET_KEY || 'minioadmin',
})

const BUCKET_NAME = process.env.MINIO_BUCKET_NAME || 'gubkin-dormitory'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ bucket
const initializeBucket = async () => {
  try {
    const bucketExists = await minioClient.bucketExists(BUCKET_NAME)

    if (!bucketExists) {
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ bucket: ${BUCKET_NAME}`)
      await minioClient.makeBucket(BUCKET_NAME, 'us-east-1')

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
      const policy = {
        Version: '2012-10-17',
        Statement: [
          {
            Effect: 'Allow',
            Principal: { AWS: ['*'] },
            Action: ['s3:GetObject'],
            Resource: [`arn:aws:s3:::${BUCKET_NAME}/public/*`],
          },
        ],
      }

      await minioClient.setBucketPolicy(BUCKET_NAME, JSON.stringify(policy))
      console.log(`Bucket ${BUCKET_NAME} —Å–æ–∑–¥–∞–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`)
    } else {
      console.log(`Bucket ${BUCKET_NAME} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MinIO bucket:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
const generateFileName = (originalName, userId, fileType) => {
  const timestamp = Date.now()
  const randomString = Math.random().toString(36).substring(2, 8)

  // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
  const extension = originalName.split('.').pop() || 'unknown'

  // –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const safeFileName = `${timestamp}-${randomString}.${extension}`

  return `${fileType}/${userId}/${safeFileName}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
const uploadFile = async (fileBuffer, fileName, contentType, metadata = {}) => {
  try {
    // –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const cleanMetadata = {
      'Content-Type': contentType,
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    Object.entries(metadata).forEach(([key, value]) => {
      if (value && typeof value === 'string') {
        // –û—á–∏—â–∞–µ–º –∫–ª—é—á –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const cleanKey = key.replace(/[^a-zA-Z0-9\-_]/g, '-')
        cleanMetadata[cleanKey] = value
      }
    })

    const uploadInfo = await minioClient.putObject(
      BUCKET_NAME,
      fileName,
      fileBuffer,
      fileBuffer.length,
      cleanMetadata,
    )

    console.log(`–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ MinIO: ${fileName}`)
    return {
      success: true,
      fileName,
      size: fileBuffer.length,
      etag: uploadInfo.etag,
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ MinIO:', error)
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      fileName,
      contentType,
      bufferSize: fileBuffer.length,
      error: error.message,
    })
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞
const getFileUrl = (fileName, expirySeconds = 24 * 60 * 60) => {
  try {
    return minioClient.presignedGetObject(BUCKET_NAME, fileName, expirySeconds)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL —Ñ–∞–π–ª–∞:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL —Ñ–∞–π–ª–∞
const getPublicFileUrl = (fileName) => {
  const protocol = process.env.MINIO_USE_SSL === 'true' ? 'https' : 'http'
  const port =
    process.env.MINIO_PORT !== '80' && process.env.MINIO_PORT !== '443'
      ? `:${process.env.MINIO_PORT}`
      : ''

  return `${protocol}://${process.env.MINIO_ENDPOINT}${port}/${BUCKET_NAME}/${fileName}`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
const deleteFile = async (fileName) => {
  try {
    await minioClient.removeObject(BUCKET_NAME, fileName)
    console.log(`–§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ MinIO: ${fileName}`)
    return true
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ MinIO:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
const fileExists = async (fileName) => {
  try {
    await minioClient.statObject(BUCKET_NAME, fileName)
    return true
  } catch (error) {
    if (error.code === 'NotFound') {
      return false
    }
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞
const getFileMetadata = async (fileName) => {
  try {
    const stat = await minioClient.statObject(BUCKET_NAME, fileName)
    return {
      size: stat.size,
      lastModified: stat.lastModified,
      etag: stat.etag,
      contentType: stat.metaData['content-type'],
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∫ stream
const getFileStream = async (fileName) => {
  try {
    console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ MinIO: ${fileName}`)
    const stream = await minioClient.getObject(BUCKET_NAME, fileName)
    console.log(`‚úÖ Stream —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–µ–Ω: ${fileName}`)
    return stream
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${fileName}:`, error)
    throw error
  }
}

module.exports = {
  minioClient,
  BUCKET_NAME,
  initializeBucket,
  generateFileName,
  uploadFile,
  getFileUrl,
  getPublicFileUrl,
  deleteFile,
  fileExists,
  getFileMetadata,
  getFileStream,
}
