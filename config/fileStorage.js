/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * –ó–∞–º–µ–Ω—è–µ—Ç MinIO –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ URL –¥–ª—è —Ñ–∞–π–ª–æ–≤
 */

const crypto = require('crypto')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const FILE_STORAGE_CONFIG = {
  // –û—Å–Ω–æ–≤–Ω–æ–π URL –¥–ª—è —Ñ–∞–π–ª–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π) - —É–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ
  PRIMARY_URL: (process.env.FILE_STORAGE_URL || 'https://files.dormitory.gubkin.uz').replace(
    /\/$/,
    '',
  ),

  // –†–µ–∑–µ—Ä–≤–Ω—ã–π URL (–µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω) - —É–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ
  FALLBACK_URL: (process.env.FILE_STORAGE_FALLBACK_URL || 'https://45.138.159.79').replace(
    /\/$/,
    '',
  ),

  // –õ–æ–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - —É–±–∏—Ä–∞–µ–º —Å–ª–µ—à –≤ –∫–æ–Ω—Ü–µ
  LOCAL_URL: (process.env.FILE_STORAGE_LOCAL_URL || 'https://192.168.1.253:3000').replace(
    /\/$/,
    '',
  ),

  // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
  MODE: process.env.FILE_STORAGE_MODE || 'external', // 'external', 'local', 'hybrid'

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  UPLOAD_ENABLED: process.env.FILE_UPLOAD_ENABLED !== 'false',

  // –¢–∞–π–º–∞—É—Ç—ã
  TIMEOUT: parseInt(process.env.FILE_STORAGE_TIMEOUT) || 10000,

  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
  MAX_FILE_SIZE: parseInt(process.env.MAX_FILE_SIZE) || 10 * 1024 * 1024, // 10MB
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 * @param {string} originalName - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} fileType - –¢–∏–ø —Ñ–∞–π–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
 * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 */
const generateFileName = (originalName, userId, fileType) => {
  const timestamp = Date.now()
  const randomString = crypto.randomBytes(8).toString('hex')
  const extension = path.extname(originalName)
  const baseName = path.basename(originalName, extension)

  // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanBaseName = baseName.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\-_]/g, '_')

  // –£–±–∏—Ä–∞–µ–º fileType –∏–∑ –ø—É—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å bucket names
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ userId –∏ timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
  return `${userId}/${timestamp}_${randomString}_${cleanBaseName}${extension}`
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ç–∏–ø–æ–º –≤ –ø—É—Ç–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 * @param {string} originalName - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} fileType - –¢–∏–ø —Ñ–∞–π–ª–∞
 * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
 */
const generateFileNameWithType = (originalName, userId, fileType) => {
  const timestamp = Date.now()
  const randomString = crypto.randomBytes(8).toString('hex')
  const extension = path.extname(originalName)
  const baseName = path.basename(originalName, extension)

  // –û—á–∏—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  const cleanBaseName = baseName.replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\-_]/g, '_')

  return `${fileType}/${userId}/${timestamp}_${randomString}_${cleanBaseName}${extension}`
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @param {string} mode - –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã ('external', 'local', 'hybrid')
 * @param {string} urlStructure - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ URL ('simple', 'with-type', 'bucket')
 * @returns {string} URL —Ñ–∞–π–ª–∞
 */
const getFileUrl = (fileName, mode = FILE_STORAGE_CONFIG.MODE, urlStructure = 'simple') => {
  if (!fileName) {
    throw new Error('–ò–º—è —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
  }

  let url
  switch (mode) {
    case 'external':
      // –î–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–µ–∑ bucket names
      if (urlStructure === 'with-type' && fileName.includes('/')) {
        // –ï—Å–ª–∏ fileName —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å —Å —Ç–∏–ø–æ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
        url = `${FILE_STORAGE_CONFIG.PRIMARY_URL}/upload/${fileName}`
      } else {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        url = `${FILE_STORAGE_CONFIG.PRIMARY_URL}/upload/${fileName}`
      }
      break

    case 'local':
      url = `${FILE_STORAGE_CONFIG.LOCAL_URL}/upload/${fileName}`
      break

    case 'hybrid':
      // –í –≥–∏–±—Ä–∏–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π URL –¥–ª—è —á—Ç–µ–Ω–∏—è, –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–ª—è –∑–∞–ø–∏—Å–∏
      url = `${FILE_STORAGE_CONFIG.PRIMARY_URL}/upload/${fileName}`
      break

    default:
      url = `${FILE_STORAGE_CONFIG.PRIMARY_URL}/upload/${fileName}`
  }

  // –û—á–∏—â–∞–µ–º URL –æ—Ç –¥–≤–æ–π–Ω—ã—Ö —Å–ª–µ—à–µ–π
  return url.replace(/([^:])\/+/g, '$1/')
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π URL –¥–ª—è —Ñ–∞–π–ª–∞
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @returns {string} –†–µ–∑–µ—Ä–≤–Ω—ã–π URL —Ñ–∞–π–ª–∞
 */
const getFallbackFileUrl = (fileName) => {
  if (!fileName) {
    throw new Error('–ò–º—è —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
  }

  return `${FILE_STORAGE_CONFIG.FALLBACK_URL}/upload/${fileName}`
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è —Ñ–∞–π–ª–∞
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @returns {string} –õ–æ–∫–∞–ª—å–Ω—ã–π URL —Ñ–∞–π–ª–∞
 */
const getLocalFileUrl = (fileName) => {
  if (!fileName) {
    throw new Error('–ò–º—è —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
  }

  return `${FILE_STORAGE_CONFIG.LOCAL_URL}/upload/${fileName}`
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
 * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Promise<boolean>} –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ URL
 */
const checkUrlAvailability = async (url) => {
  try {
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), FILE_STORAGE_CONFIG.TIMEOUT)

    const response = await fetch(url, {
      method: 'HEAD',
      signal: controller.signal,
      mode: 'cors',
    })

    clearTimeout(timeoutId)
    return response.ok
  } catch (error) {
    console.warn(`URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${url}`, error.message)
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π URL –¥–ª—è —Ñ–∞–π–ª–∞
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @returns {Promise<string>} –î–æ—Å—Ç—É–ø–Ω—ã–π URL —Ñ–∞–π–ª–∞
 */
const getBestAvailableFileUrl = async (fileName) => {
  if (!fileName) {
    throw new Error('–ò–º—è —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
  }

  const urls = [
    getFileUrl(fileName, 'external'),
    getFallbackFileUrl(fileName),
    getLocalFileUrl(fileName),
  ]

  for (const url of urls) {
    if (await checkUrlAvailability(url)) {
      return url
    }
  }

  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω URL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π
  return urls[0]
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MinIO API)
 * @param {Buffer} fileBuffer - –ë—É—Ñ–µ—Ä —Ñ–∞–π–ª–∞
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @param {string} contentType - MIME —Ç–∏–ø
 * @param {Object} metadata - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
 */
const uploadFile = async (fileBuffer, fileName, contentType, metadata = {}) => {
  if (!FILE_STORAGE_CONFIG.UPLOAD_ENABLED) {
    throw new Error('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
  }

  // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Å–µ—Ä–≤–µ—Ä
  // –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
  console.log(`üìÅ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${fileName}`)
  console.log(`üìä –†–∞–∑–º–µ—Ä: ${fileBuffer.length} –±–∞–π—Ç`)
  console.log(`üìã –¢–∏–ø: ${contentType}`)

  return {
    success: true,
    fileName,
    size: fileBuffer.length,
    etag: crypto.createHash('md5').update(fileBuffer).digest('hex'),
    url: getFileUrl(fileName),
  }
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MinIO API)
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è
 */
const deleteFile = async (fileName) => {
  console.log(`üóëÔ∏è –°–∏–º—É–ª—è—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${fileName}`)
  return true
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @returns {Promise<boolean>} –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
 */
const fileExists = async (fileName) => {
  try {
    const url = await getBestAvailableFileUrl(fileName)
    return await checkUrlAvailability(url)
  } catch (error) {
    return false
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @returns {Promise<Object>} –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
 */
const getFileMetadata = async (fileName) => {
  try {
    const url = await getBestAvailableFileUrl(fileName)
    const response = await fetch(url, { method: 'HEAD' })

    if (response.ok) {
      return {
        size: parseInt(response.headers.get('content-length') || '0'),
        contentType: response.headers.get('content-type') || 'application/octet-stream',
        lastModified: response.headers.get('last-modified'),
        etag: response.headers.get('etag'),
      }
    }

    return null
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞:', error)
    return null
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç stream —Ñ–∞–π–ª–∞
 * @param {string} fileName - –ò–º—è —Ñ–∞–π–ª–∞
 * @returns {Promise<ReadableStream>} Stream —Ñ–∞–π–ª–∞
 */
const getFileStream = async (fileName) => {
  try {
    const url = await getBestAvailableFileUrl(fileName)
    const response = await fetch(url)

    if (response.ok) {
      return response.body
    }

    throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error)
    throw error
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
const initializeStorage = async () => {
  console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞')
  console.log(`üìç –û—Å–Ω–æ–≤–Ω–æ–π URL: ${FILE_STORAGE_CONFIG.PRIMARY_URL}`)
  console.log(`üìç –†–µ–∑–µ—Ä–≤–Ω—ã–π URL: ${FILE_STORAGE_CONFIG.FALLBACK_URL}`)
  console.log(`üìç –õ–æ–∫–∞–ª—å–Ω—ã–π URL: ${FILE_STORAGE_CONFIG.LOCAL_URL}`)
  console.log(`üîß –†–µ–∂–∏–º: ${FILE_STORAGE_CONFIG.MODE}`)
  console.log(`üì§ –ó–∞–≥—Ä—É–∑–∫–∞: ${FILE_STORAGE_CONFIG.UPLOAD_ENABLED ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}`)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö URL
  const primaryAvailable = await checkUrlAvailability(FILE_STORAGE_CONFIG.PRIMARY_URL)
  const fallbackAvailable = await checkUrlAvailability(FILE_STORAGE_CONFIG.FALLBACK_URL)
  const localAvailable = await checkUrlAvailability(FILE_STORAGE_CONFIG.LOCAL_URL)

  console.log(`‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π URL: ${primaryAvailable ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`)
  console.log(`‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π URL: ${fallbackAvailable ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`)
  console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π URL: ${localAvailable ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`)

  return {
    primaryAvailable,
    fallbackAvailable,
    localAvailable,
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π URL —Ñ–∞–π–ª–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è –µ–≥–æ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
 * @param {string} oldUrl - –°—Ç–∞—Ä—ã–π URL —Å fileType –≤ –ø—É—Ç–∏
 * @returns {string} –ù–æ–≤—ã–π URL —Å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
 */
const migrateFileUrl = (oldUrl) => {
  if (!oldUrl) return null

  try {
    const url = new URL(oldUrl)

    // –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å fileType –≤ –ø—É—Ç–∏
    if (
      url.pathname.includes('/photo_3x4/') ||
      url.pathname.includes('/avatar/') ||
      url.pathname.includes('/profile/')
    ) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø—É—Ç–∏
      const pathParts = url.pathname.split('/')
      const fileName = pathParts[pathParts.length - 1]

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL —Å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
      return `${FILE_STORAGE_CONFIG.PRIMARY_URL}/upload/${fileName}`
    }

    // –ï—Å–ª–∏ URL —É–∂–µ –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return oldUrl
  } catch (error) {
    console.warn('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL:', error)
    return oldUrl
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
 * @param {string} url - URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} True –µ—Å–ª–∏ URL –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
const isOldFormatUrl = (url) => {
  if (!url) return false

  try {
    const urlObj = new URL(url)
    return (
      urlObj.pathname.includes('/photo_3x4/') ||
      urlObj.pathname.includes('/avatar/') ||
      urlObj.pathname.includes('/profile/')
    )
  } catch (error) {
    return false
  }
}

module.exports = {
  FILE_STORAGE_CONFIG,
  generateFileName,
  generateFileNameWithType,
  getFileUrl,
  getFallbackFileUrl,
  getLocalFileUrl,
  getBestAvailableFileUrl,
  checkUrlAvailability,
  uploadFile,
  deleteFile,
  fileExists,
  getFileMetadata,
  getFileStream,
  initializeStorage,
  migrateFileUrl,
  isOldFormatUrl,

  // –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MinIO API
  initializeBucket: initializeStorage,
  getPublicFileUrl: getFileUrl,
  getProxyFileUrl: getFileUrl,
  getFileUrlByMode: getFileUrl,

  // –ü—É—Å—Ç–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  minioClient: null,
  BUCKET_NAME: 'external-storage',
}
