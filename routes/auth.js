const express = require('express')
const bcrypt = require('bcryptjs')
const jwt = require('jsonwebtoken')
const { query, transaction } = require('../config/database')
const { authenticateToken } = require('../middleware/auth')
const notificationService = require('../services/notificationService')

const router = express.Router()

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateTokens(user) {
  const payload = {
    id: user.id,
    username: user.username,
    contact: user.contact,
    role: user.role,
  }

  const accessToken = jwt.sign(payload, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN || '24h', // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 24 —á–∞—Å–æ–≤
  })

  const refreshToken = jwt.sign(payload, process.env.REFRESH_TOKEN_SECRET, {
    expiresIn: process.env.REFRESH_TOKEN_EXPIRES_IN || '7d',
  })

  return { accessToken, refreshToken }
}

// 1. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø: –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
router.post('/register-request', async (req, res) => {
  try {
    const { contact } = req.body

    if (!contact) {
      return res.status(400).json({ error: '–ö–æ–Ω—Ç–∞–∫—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º
    const contactInfo = notificationService.detectContactType(contact)
    if (!contactInfo) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞' })
    }

    const { type: contactType, normalized: normalizedContact } = contactInfo

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const existingUser = await query('SELECT id FROM users WHERE contact = $1', [normalizedContact])

    if (existingUser.rows.length > 0) {
      return res.status(400).json({
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É.',
      })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting —á–µ—Ä–µ–∑ PostgreSQL —Ñ—É–Ω–∫—Ü–∏—é
    try {
      const rateLimitCheck = await query('SELECT check_rate_limits($1, $2)', [
        req.ip,
        'request_code',
      ])

      if (!rateLimitCheck.rows[0].check_rate_limits) {
        return res.status(429).json({
          error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
          waitSeconds: 60,
        })
      }
    } catch (rateLimitError) {
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ rate limiting –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      console.log('‚ö†Ô∏è Rate limiting —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', rateLimitError.message)
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
    const { code, hashedCode, result } = await notificationService.sendVerificationCode(
      normalizedContact,
      contactType,
    )

    if (!result.success) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞:', result.error)
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞' })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    await query(
      `INSERT INTO verification_codes (contact, contact_type, code_hash, expires_at, ip_address, type) 
       VALUES ($1, $2, $3, $4, $5, $6)
       ON CONFLICT (contact) 
       DO UPDATE SET 
         contact_type = EXCLUDED.contact_type,
         code_hash = EXCLUDED.code_hash, 
         expires_at = EXCLUDED.expires_at, 
         ip_address = EXCLUDED.ip_address,
         type = EXCLUDED.type,
         created_at = CURRENT_TIMESTAMP`,
      [
        normalizedContact,
        contactType,
        hashedCode,
        new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 –≥–æ–¥ –≤–º–µ—Å—Ç–æ 10 –º–∏–Ω—É—Ç
        req.ip,
        'registration',
      ],
    )

    console.log(`üìß –ö–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${normalizedContact}`)

    res.json({
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
      contact: normalizedContact,
      contactType,
      expiresIn: null, // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 1.5. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞)
router.post('/verify-registration-code', async (req, res) => {
  try {
    const { contact, code } = req.body

    if (!contact || !code) {
      return res.status(400).json({ error: '–ö–æ–Ω—Ç–∞–∫—Ç –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –ë–î
    const codeResult = await query(
      `SELECT code_hash, contact_type, attempts, expires_at 
       FROM verification_codes 
       WHERE contact = $1 AND type = 'registration'`,
      [contact],
    )

    if (codeResult.rows.length === 0) {
      return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const { code_hash, contact_type } = codeResult.rows[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    const isValidCode = notificationService.verifyCode(code, code_hash)

    if (!isValidCode) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' })
    }

    res.json({
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      contact,
      contactType: contact_type,
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 2. –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞
router.post('/register-verify', async (req, res) => {
  try {
    const { contact, code, username, password } = req.body

    if (!contact || !code || !username || !password) {
      return res.status(400).json({ error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è
    if (password.length < 6) {
      return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è username
    if (username.length < 3 || username.length > 50) {
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤' })
    }

    if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -' })
    }

    const result = await transaction(async (client) => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ verification_codes (–∫–æ–¥ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –Ω–∞ –≤—Ç–æ—Ä–æ–º —à–∞–≥–µ)
      const codeResult = await client.query(
        `SELECT contact_type 
         FROM verification_codes 
         WHERE contact = $1 AND type = 'registration'`,
        [contact],
      )

      if (codeResult.rows.length === 0) {
        throw new Error('–î–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      }

      const { contact_type } = codeResult.rows[0]

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å username
      const usernameCheck = await client.query('SELECT id FROM users WHERE username = $1', [
        username,
      ])

      if (usernameCheck.rows.length > 0) {
        throw new Error('–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç')
      }

      // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const saltRounds = parseInt(process.env.BCRYPT_ROUNDS || 12)
      const passwordHash = await bcrypt.hash(password, saltRounds)

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userResult = await client.query(
        `INSERT INTO users (username, password_hash, contact, contact_type, is_verified, role) 
         VALUES ($1, $2, $3, $4, true, 'student') 
         RETURNING id, username, contact, contact_type, role, created_at`,
        [username, passwordHash, contact, contact_type],
      )

      const user = userResult.rows[0]

      // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
      await client.query('DELETE FROM verification_codes WHERE contact = $1 AND type = $2', [
        contact,
        'registration',
      ])

      // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      // await loggingService.logUserActivity({
      //   userId: user.id,
      //   actionType: 'register_success',
      //   actionDescription: 'User registered successfully',
      //   req,
      //   success: true,
      //   requestData: { username, contact, contactType: contact_type },
      // })

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
      const tokens = generateTokens(user)

      console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${username} (${contact})`)

      return {
        message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        user: {
          id: user.id,
          username: user.username,
          contact: user.contact,
          contactType: user.contact_type,
          role: user.role,
          isVerified: true,
          createdAt: user.created_at,
        },
        tokens,
        isNewUser: true,
      }
    })

    res.json(result)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error)
    res.status(400).json({ error: error.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' })
  }
})

// 3. –í–•–û–î: –û–±—ã—á–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ª–æ–≥–∏–Ω—É/email –∏ –ø–∞—Ä–æ–ª—é
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body

    if (!username || !password) {
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω/email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –¥–ª—è –ª–æ–≥–∏–Ω–∞ - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞
    // (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–ª–∏ email
    const userResult = await query(
      `SELECT id, username, password_hash, contact, contact_type, role, is_verified, created_at 
       FROM users 
       WHERE username = $1 OR contact = $1`,
      [username],
    )

    if (userResult.rows.length === 0) {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      await query(
        'INSERT INTO auth_attempts (ip_address, username, success) VALUES ($1, $2, false)',
        [req.ip, username],
      )

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
      // await loggingService.logUserActivity({
      //   userId: null,
      //   actionType: 'login_failed',
      //   actionDescription: 'Login failed - user not found',
      //   req,
      //   success: false,
      //   errorMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
      //   requestData: { username },
      // })

      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' })
    }

    const user = userResult.rows[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValidPassword = await bcrypt.compare(password, user.password_hash)

    if (!isValidPassword) {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
      await query(
        'INSERT INTO auth_attempts (ip_address, username, success) VALUES ($1, $2, false)',
        [req.ip, username],
      )

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
      // await loggingService.logUserActivity({
      //   userId: user.id,
      //   actionType: 'login_failed',
      //   actionDescription: 'Login failed - wrong password',
      //   req,
      //   success: false,
      //   errorMessage: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
      //   requestData: { username },
      // })

      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' })
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
    await query('INSERT INTO auth_attempts (ip_address, username, success) VALUES ($1, $2, true)', [
      req.ip,
      username,
    ])

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    // await loggingService.logUserActivity({
    //   userId: user.id,
    //   actionType: 'login_success',
    //   actionDescription: 'User logged in successfully',
    //   req,
    //   success: true,
    //   requestData: { username },
    // })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    const tokens = generateTokens(user)

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É: ${username}`)

    res.json({
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
      user: {
        id: user.id,
        username: user.username,
        contact: user.contact,
        contactType: user.contact_type,
        role: user.role,
        isVerified: user.is_verified,
        createdAt: user.created_at,
      },
      tokens,
      isNewUser: false,
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
router.get('/me', authenticateToken, async (req, res) => {
  try {
    const userResult = await query(
      `SELECT u.id, u.username, u.contact, u.contact_type, u.role, u.is_verified, u.created_at, u.updated_at,
              u.first_name, u.last_name, u.middle_name, u.phone, u.email, u.student_id, u.group_name, u.course,
              f.file_name as avatar_file_name
       FROM users u
       LEFT JOIN files f ON u.avatar_file_id = f.id AND f.status = 'active' AND f.deleted_at IS NULL
       WHERE u.id = $1`,
      [req.user.id],
    )

    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const user = userResult.rows[0]

    res.json({
      id: user.id,
      username: user.username,
      contact: user.contact,
      contactType: user.contact_type,
      role: user.role,
      isVerified: user.is_verified,
      createdAt: user.created_at,
      updatedAt: user.updated_at,
      avatarFileName: user.avatar_file_name,
      // –î–æ–±–∞–≤–ª—è–µ–º –§–ò–û –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      firstName: user.first_name,
      lastName: user.last_name,
      middleName: user.middle_name,
      phone: user.phone,
      email: user.email,
      studentId: user.student_id,
      groupName: user.group_name,
      course: user.course,
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
router.post('/refresh', async (req, res) => {
  try {
    const { refreshToken } = req.body

    if (!refreshToken) {
      return res.status(400).json({ error: 'Refresh token –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    const decoded = jwt.verify(refreshToken, process.env.REFRESH_TOKEN_SECRET)

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await query(
      'SELECT id, username, contact, contact_type, role FROM users WHERE id = $1',
      [decoded.id],
    )

    if (userResult.rows.length === 0) {
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const user = userResult.rows[0]
    const tokens = generateTokens(user)

    res.json({ tokens })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error)
    res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π refresh token' })
  }
})

// 6. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
router.post('/logout', authenticateToken, async (req, res) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    // await loggingService.logUserActivity({
    //   userId: req.user.id,
    //   actionType: 'logout',
    //   actionDescription: 'User logged out',
    //   req,
    //   success: true,
    // })

    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å blacklist —Ç–æ–∫–µ–Ω–æ–≤
    console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã`)

    res.json({ message: '–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ username
router.get('/check-username', async (req, res) => {
  try {
    const { username } = req.query

    if (!username) {
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    if (username.length < 3 || username.length > 50) {
      return res.status(400).json({
        available: false,
        error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤',
      })
    }

    if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
      return res.status(400).json({
        available: false,
        error: '–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -',
      })
    }

    const result = await query('SELECT check_username_unique($1)', [username])
    const available = result.rows[0].check_username_unique

    res.json({
      available,
      message: available ? '–õ–æ–≥–∏–Ω –¥–æ—Å—Ç—É–ø–µ–Ω' : '–õ–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç',
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 7.1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è email (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è)
router.get('/check-email', async (req, res) => {
  try {
    const { email } = req.query

    if (!email) {
      return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email
    const userResult = await query('SELECT id FROM users WHERE contact = $1', [email])

    res.json({
      exists: userResult.rows.length > 0,
      message: userResult.rows.length > 0 ? 'Email –Ω–∞–π–¥–µ–Ω' : 'Email –Ω–µ –Ω–∞–π–¥–µ–Ω',
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 7.2. –ó–∞–ø—Ä–æ—Å —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ email (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
router.post('/forgot-password', async (req, res) => {
  try {
    const { email } = req.body

    if (!email) {
      return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await query(
      'SELECT id, contact, contact_type FROM users WHERE contact = $1',
      [email],
    )

    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const user = userResult.rows[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    const rateLimitCheck = await query('SELECT check_rate_limits($1, $2)', [
      req.ip,
      'forgot_password',
    ])

    if (!rateLimitCheck.rows[0].check_rate_limits) {
      return res.status(429).json({
        error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.',
        waitSeconds: 120,
      })
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
    const { code, hashedCode, result } = await notificationService.sendVerificationCode(
      user.contact,
      user.contact_type,
    )

    if (!result.success) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', result.error)
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞' })
    }

    console.log(`üî¢ –ö–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${code}, —Ö—ç—à: ${hashedCode}`)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    await query(
      `INSERT INTO verification_codes (contact, contact_type, code_hash, expires_at, ip_address, type) 
       VALUES ($1, $2, $3, $4, $5, $6)
       ON CONFLICT (contact) 
       DO UPDATE SET 
         contact_type = EXCLUDED.contact_type,
         code_hash = EXCLUDED.code_hash, 
         expires_at = EXCLUDED.expires_at, 
         ip_address = EXCLUDED.ip_address,
         type = EXCLUDED.type,
         created_at = CURRENT_TIMESTAMP`,
      [
        user.contact,
        user.contact_type,
        hashedCode,
        new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 –≥–æ–¥ –≤–º–µ—Å—Ç–æ 10 –º–∏–Ω—É—Ç
        req.ip,
        'password_reset',
      ],
    )

    console.log(`üìß –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${user.contact}`)

    res.json({
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email',
      contact: user.contact,
      contactType: user.contact_type,
      expiresIn: null, // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 7.2.1. –ê–ª–∏–∞—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º)
router.post('/request-password-reset', async (req, res) => {
  try {
    const { email } = req.body

    if (!email) {
      return res.status(400).json({ error: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await query(
      'SELECT id, contact, contact_type FROM users WHERE contact = $1',
      [email],
    )

    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const user = userResult.rows[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
    try {
      const rateLimitCheck = await query('SELECT check_rate_limits($1, $2)', [
        req.ip,
        'forgot_password',
      ])

      if (!rateLimitCheck.rows[0].check_rate_limits) {
        return res.status(429).json({
          error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã.',
          waitSeconds: 120,
        })
      }
    } catch (rateLimitError) {
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ rate limiting –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      console.log('‚ö†Ô∏è Rate limiting —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', rateLimitError.message)
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
    const { code, hashedCode, result } = await notificationService.sendVerificationCode(
      user.contact,
      user.contact_type,
    )

    if (!result.success) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', result.error)
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞' })
    }

    console.log(`üî¢ –ö–æ–¥ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${code}, —Ö—ç—à: ${hashedCode}`)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –≤ –ë–î (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
    await query(
      `INSERT INTO verification_codes (contact, contact_type, code_hash, expires_at, ip_address, type) 
       VALUES ($1, $2, $3, $4, $5, $6)
       ON CONFLICT (contact) 
       DO UPDATE SET 
         contact_type = EXCLUDED.contact_type,
         code_hash = EXCLUDED.code_hash, 
         expires_at = EXCLUDED.expires_at, 
         ip_address = EXCLUDED.ip_address,
         type = EXCLUDED.type,
         created_at = CURRENT_TIMESTAMP`,
      [
        user.contact,
        user.contact_type,
        hashedCode,
        new Date(Date.now() + 365 * 24 * 60 * 60 * 1000), // 1 –≥–æ–¥ –≤–º–µ—Å—Ç–æ 10 –º–∏–Ω—É—Ç
        req.ip,
        'password_reset',
      ],
    )

    console.log(`üìß –ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${user.contact}`)

    res.json({
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email',
      contact: user.contact,
      contactType: user.contact_type,
      expiresIn: null, // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 7.3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
router.post('/verify-reset-code', async (req, res) => {
  try {
    const { code, email } = req.body

    if (!code || !email) {
      return res.status(400).json({ error: '–ö–æ–¥ –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await query(
      'SELECT id, contact, contact_type FROM users WHERE contact = $1',
      [email],
    )

    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const user = userResult.rows[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    const codeResult = await query(
      `SELECT code_hash, attempts, expires_at 
       FROM verification_codes 
       WHERE contact = $1 AND type = 'password_reset'`,
      [user.contact],
    )

    if (codeResult.rows.length === 0) {
      return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const codeData = codeResult.rows[0]

    // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    const isValidCode = notificationService.verifyCode(code, codeData.code_hash)

    if (!isValidCode) {
      // –£–±–∏—Ä–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' })
    }

    // –£–±–∏—Ä–∞–µ–º —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

    console.log(`‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.contact}`)

    res.json({
      message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
      contact: user.contact,
      userId: user.id,
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 7.4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
router.post('/set-new-password', async (req, res) => {
  try {
    const { email, code, newPassword } = req.body

    if (!email || !code || !newPassword) {
      return res.status(400).json({ error: 'Email, –∫–æ–¥ –∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–æ–ª—è (—Ç–∞–∫–∏–µ –∂–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏)
    if (newPassword.length < 6) {
      return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await query(
      'SELECT id, contact, contact_type FROM users WHERE contact = $1',
      [email],
    )

    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const user = userResult.rows[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –µ—â–µ —Ä–∞–∑
    const codeResult = await query(
      `SELECT code_hash, attempts, expires_at 
       FROM verification_codes 
       WHERE contact = $1 AND type = 'password_reset'`,
      [user.contact],
    )

    if (codeResult.rows.length === 0) {
      return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const codeData = codeResult.rows[0]

    // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    const isValidCode = notificationService.verifyCode(code, codeData.code_hash)

    if (!isValidCode) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' })
    }

    // –•—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const saltRounds = parseInt(process.env.BCRYPT_ROUNDS || 12)
    const hashedPassword = await bcrypt.hash(newPassword, saltRounds)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query('UPDATE users SET password_hash = $1, updated_at = NOW() WHERE id = $2', [
      hashedPassword,
      user.id,
    ])

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    await query('DELETE FROM verification_codes WHERE contact = $1 AND type = $2', [
      user.contact,
      'password_reset',
    ])

    console.log(`‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.contact}`)

    res.json({
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
      contact: user.contact,
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 7.5. –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ –∫–æ–¥—É (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏) - LEGACY
router.post('/reset-password-by-code', async (req, res) => {
  try {
    const { code, email } = req.body

    if (!code || !email) {
      return res.status(400).json({ error: '–ö–æ–¥ –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    if (!emailRegex.test(email)) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await query(
      'SELECT id, contact, contact_type FROM users WHERE contact = $1',
      [email],
    )

    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const user = userResult.rows[0]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    const codeResult = await query(
      `SELECT code_hash, attempts, expires_at 
       FROM verification_codes 
       WHERE contact = $1 AND type = 'password_reset'`,
      [user.contact],
    )

    if (codeResult.rows.length === 0) {
      return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const codeData = codeResult.rows[0]

    // –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    const isValidCode = notificationService.verifyCode(code, codeData.code_hash)

    if (!isValidCode) {
      // –£–±–∏—Ä–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' })
    }

    // –£–±–∏—Ä–∞–µ–º —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ - –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const newPassword = Math.random().toString(36).slice(-8) + Math.random().toString(36).slice(-4)
    const hashedPassword = await bcrypt.hash(newPassword, 12)

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await query('UPDATE users SET password_hash = $1, updated_at = NOW() WHERE id = $2', [
      hashedPassword,
      user.id,
    ])

    // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    await query('DELETE FROM verification_codes WHERE contact = $1 AND type = $2', [
      user.contact,
      'password_reset',
    ])

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–∞ email
    const emailResult = await notificationService.sendPasswordResetEmail(user.contact, newPassword)

    if (!emailResult.success) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è:', emailResult.error)
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è' })
    }

    console.log(`‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.contact}`)

    res.json({
      message: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email',
      contact: user.contact,
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// 8. –ò–∑–º–µ–Ω–µ–Ω–∏–µ username
router.put('/change-username', authenticateToken, async (req, res) => {
  try {
    const { newUsername, password } = req.body

    if (!newUsername || !password) {
      return res.status(400).json({ error: '–ù–æ–≤—ã–π –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' })
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ username
    if (newUsername.length < 3 || newUsername.length > 50) {
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤' })
    }

    if (!/^[a-zA-Z0-9_-]+$/.test(newUsername)) {
      return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, _ –∏ -' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
    const userResult = await query('SELECT password_hash FROM users WHERE id = $1', [req.user.id])

    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }

    const isValidPassword = await bcrypt.compare(password, userResult.rows[0].password_hash)

    if (!isValidPassword) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ username
    const usernameCheck = await query('SELECT id FROM users WHERE username = $1 AND id != $2', [
      newUsername,
      req.user.id,
    ])

    if (usernameCheck.rows.length > 0) {
      return res.status(400).json({ error: '–≠—Ç–æ—Ç –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç' })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º username
    await query('UPDATE users SET username = $1, updated_at = NOW() WHERE id = $2', [
      newUsername,
      req.user.id,
    ])

    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} –∏–∑–º–µ–Ω–∏–ª –ª–æ–≥–∏–Ω –Ω–∞: ${newUsername}`)

    res.json({
      message: '–õ–æ–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω',
      newUsername,
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

module.exports = router
