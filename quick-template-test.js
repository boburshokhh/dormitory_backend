#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç DOCX —à–∞–±–ª–æ–Ω–∞
 * –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
 */

const fs = require('fs')
const { execSync } = require('child_process')
const Docxtemplater = require('docxtemplater')
const PizZip = require('pizzip')
const QRCode = require('qrcode')

// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const log = (emoji, message) => console.log(`${emoji} ${message}`)

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_DATA = {
  fullName: '–¢–ï–°–¢–û–í –¢–ï–°–¢ –¢–ï–°–¢–û–í–ò–ß',
  docNumber: '–î–ü–°-2025/12345',
  birthDateStr: '¬´01¬ª —è–Ω–≤–∞—Ä—è 2000 –≥.',
  addressFull: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1',
  faculty: '–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π',
  course: '1',
  groupNumber: '–ì–†-101',
  educationForm: '–æ—á–Ω–∞—è',
  basis: '–±—é–¥–∂–µ—Ç',
  dormNumber: '1',
  floor: '2',
  roomNumber: '201',
  periodFromStr: '¬´01¬ª —Å–µ–Ω—Ç—è–±—Ä—è 2024 –≥.',
  periodToStr: '¬´30¬ª –∏—é–Ω—è 2025 –≥.',
  contractNumber: '123/2024',
  contractDateStr: '¬´15¬ª –∞–≤–≥—É—Å—Ç–∞ 2024 –≥.',
  headName: '–ü–ï–¢–†–û–í –ü.–ü.',
  registrarName: '–°–ò–î–û–†–û–í –°.–°.',
}

async function quickTest(templatePath) {
  log('üß™', '–ë–´–°–¢–†–´–ô –¢–ï–°–¢ –®–ê–ë–õ–û–ù–ê')
  log('üìÅ', `–§–∞–π–ª: ${templatePath}`)

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(templatePath)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${templatePath}`)
    }

    const stats = fs.statSync(templatePath)
    log('‚úÖ', `–§–∞–π–ª –Ω–∞–π–¥–µ–Ω (${stats.size} –±–∞–π—Ç)`)

    // 2. –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    log('üîç', '–ê–Ω–∞–ª–∏–∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤...')

    try {
      execSync(`unzip -p "${templatePath}" word/document.xml > /tmp/doc.xml 2>/dev/null`)
      const xml = fs.readFileSync('/tmp/doc.xml', 'utf8')

      // –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
      const correct = xml.match(/\{[A-Za-z0-9_]+\}/g) || []
      const wrong = [
        ...(xml.match(/%[A-Za-z0-9_]+%/g) || []),
        ...(xml.match(/\{\%[^}]+\%\}/g) || []),
      ]

      if (correct.length > 0) {
        log('‚úÖ', `–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: ${correct.join(', ')}`)
      } else {
        log('‚ùå', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã!')
      }

      if (wrong.length > 0) {
        log('‚ùå', `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: ${wrong.join(', ')}`)
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π Word
      if (xml.includes('w:fldChar')) {
        log('‚ö†Ô∏è', '–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è Word (Ctrl+F9) - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç')
      }
    } catch (e) {
      log('‚ö†Ô∏è', `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å XML: ${e.message}`)
    }

    // 3. –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∞
    log('üéØ', '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∞...')

    const templateBuffer = fs.readFileSync(templatePath)
    const qrBuffer = await QRCode.toBuffer('https://test.example.com', { width: 600 })

    const zip = new PizZip(templateBuffer)
    const doc = new Docxtemplater(zip, {
      paragraphLoop: true,
      linebreaks: true,
    })

    const qrBase64 = qrBuffer.toString('base64')
    const dataWithQR = { ...TEST_DATA, qr: qrBase64 }

    doc.setData(dataWithQR)
    doc.render()

    const report = doc.getZip().generate({ type: 'nodebuffer' })

    const outputPath = '/tmp/test-result.docx'
    fs.writeFileSync(outputPath, report)

    log('‚úÖ', `–†–µ–Ω–¥–µ—Ä —É—Å–ø–µ—à–µ–Ω! –†–∞–∑–º–µ—Ä: ${report.length} –±–∞–π—Ç`)
    log('üíæ', `–†–µ–∑—É–ª—å—Ç–∞—Ç: ${outputPath}`)

    // 4. –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    try {
      execSync(`unzip -p "${outputPath}" word/document.xml > /tmp/result.xml 2>/dev/null`)
      const resultXml = fs.readFileSync('/tmp/result.xml', 'utf8')

      const substituted = []
      const notSubstituted = []

      Object.keys(TEST_DATA).forEach((key) => {
        if (resultXml.includes(TEST_DATA[key])) {
          substituted.push(key)
        } else if (resultXml.includes(`{${key}}`)) {
          notSubstituted.push(key)
        }
      })

      log('üìä', `–ü–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ: ${substituted.length}/${Object.keys(TEST_DATA).length}`)

      if (substituted.length > 0) {
        log(
          '‚úÖ',
          `–†–∞–±–æ—Ç–∞—é—Ç: ${substituted.slice(0, 5).join(', ')}${substituted.length > 5 ? '...' : ''}`,
        )
      }

      if (notSubstituted.length > 0) {
        log('‚ùå', `–ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç: ${notSubstituted.join(', ')}`)
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ QR
      if (resultXml.includes('{qr}')) {
        log('‚ùå', 'QR-–∫–æ–¥ –Ω–µ –≤—Å—Ç–∞–≤–∏–ª—Å—è')
      } else if (resultXml.includes('w:drawing')) {
        log('‚úÖ', 'QR-–∫–æ–¥ –≤—Å—Ç–∞–≤–ª–µ–Ω')
      }
    } catch (e) {
      log('‚ö†Ô∏è', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç')
    }

    log('üèÅ', '–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
  } catch (error) {
    log('üí•', `–û–®–ò–ë–ö–ê: ${error.message}`)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫
const templatePath = process.argv[2]
if (!templatePath) {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node quick-template-test.js <–ø—É—Ç—å-–∫-—Ñ–∞–π–ª—É.docx>')
  console.log('–ü—Ä–∏–º–µ—Ä: node quick-template-test.js /tmp/template.docx')
  process.exit(1)
}

quickTest(templatePath)
