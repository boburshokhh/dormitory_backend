#!/usr/bin/env node

/**
 * üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ "–í–ò–†–¢–£–ê–õ–¨–ù–´–ô –û–§–ò–°"
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: Backend, –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö, MinIO, –®–∞–±–ª–æ–Ω—ã
 */

const fs = require('fs')
const path = require('path')
const { Pool } = require('pg')
const { Client: MinioClient } = require('minio')
const Docxtemplater = require('docxtemplater')
const PizZip = require('pizzip')
require('dotenv').config()

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bright: '\x1b[1m',
}

const log = (icon, message, color = colors.white) => {
  console.log(`${color}${icon} ${message}${colors.reset}`)
}

const success = (message) => log('‚úÖ', message, colors.green)
const error = (message) => log('‚ùå', message, colors.red)
const warning = (message) => log('‚ö†Ô∏è', message, colors.yellow)
const info = (message) => log('‚ÑπÔ∏è', message, colors.blue)
const header = (message) => log('üîß', message, colors.cyan + colors.bright)

class SystemDiagnostic {
  constructor() {
    this.results = {
      environment: false,
      database: false,
      minio: false,
      backend: false,
      templates: false,
    }
    this.issues = []
    this.dbPool = null
    this.minioClient = null
  }

  async run() {
    header('–ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´')
    console.log('')

    try {
      await this.checkEnvironment()
      await this.checkDatabase()
      await this.checkMinio()
      await this.checkBackendCode()
      await this.checkTemplateEngine()

      this.printSummary()
    } catch (err) {
      error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${err.message}`)
    } finally {
      if (this.dbPool) await this.dbPool.end()
    }
  }

  async checkEnvironment() {
    header('1. –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø')

    const required = [
      'DB_HOST',
      'DB_PORT',
      'DB_NAME',
      'DB_USER',
      'DB_PASSWORD',
      'MINIO_ENDPOINT',
      'MINIO_ACCESS_KEY',
      'MINIO_SECRET_KEY',
      'FILE_STORAGE_URL',
      'DOCS_HMAC_SECRET',
    ]

    let missing = []
    for (const key of required) {
      if (!process.env[key]) {
        missing.push(key)
      } else {
        success(`${key}: ‚úì`)
      }
    }

    if (missing.length > 0) {
      error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missing.join(', ')}`)
      this.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${missing.join(', ')}`)
    } else {
      success('–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
      this.results.environment = true
    }

    console.log('')
  }

  async checkDatabase() {
    header('2. –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•')

    try {
      this.dbPool = new Pool({
        host: process.env.DB_HOST,
        port: process.env.DB_PORT,
        database: process.env.DB_NAME,
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
      })

      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      const client = await this.dbPool.connect()
      success('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL: ‚úì')
      client.release()

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
      const tables = ['templates', 'documents', 'document_verifications']
      for (const table of tables) {
        const result = await this.dbPool.query(
          'SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = $1)',
          [table],
        )

        if (result.rows[0].exists) {
          success(`–¢–∞–±–ª–∏—Ü–∞ ${table}: ‚úì`)
        } else {
          error(`–¢–∞–±–ª–∏—Ü–∞ ${table}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`)
          this.issues.push(`–¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ —Å–æ–∑–¥–∞–Ω–∞`)
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è uuid-ossp
      const uuidResult = await this.dbPool.query(
        "SELECT EXISTS (SELECT FROM pg_extension WHERE extname = 'uuid-ossp')",
      )

      if (uuidResult.rows[0].exists) {
        success('–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ uuid-ossp: ‚úì')
      } else {
        error('–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ uuid-ossp: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
        this.issues.push('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ uuid-ossp')
      }

      this.results.database =
        this.issues.filter((i) => i.includes('–¢–∞–±–ª–∏—Ü–∞') || i.includes('uuid-ossp')).length === 0
    } catch (err) {
      error(`–û—à–∏–±–∫–∞ –ë–î: ${err.message}`)
      this.issues.push(`Database: ${err.message}`)
    }

    console.log('')
  }

  async checkMinio() {
    header('3. –ü–†–û–í–ï–†–ö–ê MINIO')

    try {
      this.minioClient = new MinioClient({
        endPoint: process.env.MINIO_ENDPOINT,
        port: parseInt(process.env.MINIO_PORT || '9000'),
        useSSL: process.env.MINIO_USE_SSL === 'true',
        accessKey: process.env.MINIO_ACCESS_KEY,
        secretKey: process.env.MINIO_SECRET_KEY,
      })

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ bucket
      const bucketExists = await this.minioClient.bucketExists(process.env.MINIO_BUCKET_NAME)
      if (bucketExists) {
        success(`Bucket ${process.env.MINIO_BUCKET_NAME}: ‚úì`)
        this.results.minio = true
      } else {
        error(`Bucket ${process.env.MINIO_BUCKET_NAME}: –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        this.issues.push(`MinIO bucket –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }

      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
      const testData = Buffer.from('test')
      const testKey = 'test/diagnostic-test.txt'

      await this.minioClient.putObject(process.env.MINIO_BUCKET_NAME, testKey, testData)
      success('–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ‚úì')

      await this.minioClient.removeObject(process.env.MINIO_BUCKET_NAME, testKey)
      success('–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ‚úì')
    } catch (err) {
      error(`–û—à–∏–±–∫–∞ MinIO: ${err.message}`)
      this.issues.push(`MinIO: ${err.message}`)
    }

    console.log('')
  }

  async checkBackendCode() {
    header('4. –ü–†–û–í–ï–†–ö–ê BACKEND –ö–û–î–ê')

    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
      const files = ['controllers/officeController.js', 'routes/office.js', 'package.json']

      for (const file of files) {
        if (fs.existsSync(path.join(__dirname, file))) {
          success(`–§–∞–π–ª ${file}: ‚úì`)
        } else {
          error(`–§–∞–π–ª ${file}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`)
          this.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∞–π–ª: ${file}`)
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, 'package.json'), 'utf8'))
      const deps = packageJson.dependencies || {}

      const required = ['docxtemplater', 'pizzip', 'qrcode', 'libreoffice-convert']
      for (const dep of required) {
        if (deps[dep]) {
          success(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep}: ‚úì (${deps[dep]})`)
        } else {
          error(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`)
          this.issues.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dep}`)
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
      if (deps['docx-templates']) {
        warning('–ù–∞–π–¥–µ–Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å docx-templates')
        this.issues.push('–¢—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å docx-templates')
      }

      this.results.backend =
        this.issues.filter((i) => i.includes('—Ñ–∞–π–ª') || i.includes('–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å')).length === 0
    } catch (err) {
      error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: ${err.message}`)
      this.issues.push(`Backend code: ${err.message}`)
    }

    console.log('')
  }

  async checkTemplateEngine() {
    header('5. –ü–†–û–í–ï–†–ö–ê –î–í–ò–ñ–ö–ê –®–ê–ë–õ–û–ù–û–í')

    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π DOCX
      const testDocx = this.createTestTemplate()

      // –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∞
      const zip = new PizZip(testDocx)
      const doc = new Docxtemplater(zip, {
        paragraphLoop: true,
        linebreaks: true,
      })

      const testData = {
        name: '–¢–ï–°–¢',
        date: '2025-01-01',
        number: '123',
      }

      await doc.renderAsync(testData)
      const result = doc.getZip().generate({ type: 'nodebuffer' })

      success(`–î–≤–∏–∂–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: ‚úì (${result.length} –±–∞–π—Ç)`)
      this.results.templates = true
    } catch (err) {
      error(`–û—à–∏–±–∫–∞ –¥–≤–∏–∂–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤: ${err.message}`)
      this.issues.push(`Template engine: ${err.message}`)
    }

    console.log('')
  }

  createTestTemplate() {
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π DOCX —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏
    const content = `
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">
  <w:body>
    <w:p>
      <w:r><w:t>–¢–µ—Å—Ç: {name}, –î–∞—Ç–∞: {date}, –ù–æ–º–µ—Ä: {number}</w:t></w:r>
    </w:p>
  </w:body>
</w:document>`

    const zip = new PizZip()
    zip.file('word/document.xml', content)
    zip.file(
      '[Content_Types].xml',
      `<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Types xmlns="http://schemas.openxmlformats.org/package/2006/content-types">
  <Default Extension="xml" ContentType="application/xml"/>
  <Override PartName="/word/document.xml" ContentType="application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml"/>
</Types>`,
    )

    return zip.generate({ type: 'nodebuffer' })
  }

  printSummary() {
    header('üìä –°–í–û–î–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò')

    const total = Object.keys(this.results).length
    const passed = Object.values(this.results).filter(Boolean).length

    console.log('')
    log('üìà', `–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${passed}/${total}`, colors.blue)

    if (this.issues.length === 0) {
      success('üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´!')
    } else {
      error(`‚ùå –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: ${this.issues.length}`)
      console.log('')
      this.issues.forEach((issue, i) => {
        error(`${i + 1}. ${issue}`)
      })
    }

    console.log('')
    header('üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:')
    console.log('')

    if (!this.results.environment) {
      warning('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ')
    }

    if (!this.results.database) {
      warning('2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: psql -d gubkin_dormitory -f migrations/add_office_tables.sql')
      warning('   –í–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    }

    if (!this.results.minio) {
      warning('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MinIO –∏ —Å–æ–∑–¥–∞–π—Ç–µ bucket')
    }

    if (!this.results.backend) {
      warning(
        '4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install docxtemplater pizzip qrcode libreoffice-convert',
      )
      warning('   –£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–µ: npm uninstall docx-templates')
    }

    if (!this.results.templates) {
      warning('5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–≤–∏–∂–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏')
    }

    if (passed === total) {
      success('‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!')
    } else {
      error('‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º')
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
if (require.main === module) {
  const diagnostic = new SystemDiagnostic()
  diagnostic.run().catch((err) => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err)
    process.exit(1)
  })
}

module.exports = SystemDiagnostic
