const loggingService = require('../services/loggingService')

// –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const ERROR_TYPES = {
  VALIDATION: 'VALIDATION_ERROR',
  DATABASE: 'DATABASE_ERROR',
  PERMISSION: 'PERMISSION_ERROR',
  NOT_FOUND: 'NOT_FOUND_ERROR',
  BUSINESS_LOGIC: 'BUSINESS_LOGIC_ERROR',
  EXTERNAL_SERVICE: 'EXTERNAL_SERVICE_ERROR',
  SYSTEM: 'SYSTEM_ERROR',
}

class ApplicationError extends Error {
  constructor(message, type = ERROR_TYPES.SYSTEM, details = {}) {
    super(message)
    this.name = 'ApplicationError'
    this.type = type
    this.details = details
    this.timestamp = new Date().toISOString()
  }
}

// –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
const logDetailedError = (error, context = {}) => {
  const errorLog = {
    timestamp: new Date().toISOString(),
    error_type: error.type || ERROR_TYPES.SYSTEM,
    error_message: error.message,
    error_stack: error.stack,
    context: {
      file: context.file || 'unknown',
      function: context.function || 'unknown',
      user_id: context.userId || null,
      request_id: context.requestId || null,
      endpoint: context.endpoint || null,
      method: context.method || null,
      ...context,
    },
    details: error.details || {},
    raw_error: error,
  }

  console.error('üî• –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê üî•')
  console.error('‚ïê'.repeat(80))
  console.error(`üìç –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï: ${errorLog.context.file} -> ${errorLog.context.function}`)
  console.error(`üïê –í–†–ï–ú–Ø: ${errorLog.timestamp}`)
  console.error(`‚ö†Ô∏è  –¢–ò–ü –û–®–ò–ë–ö–ò: ${errorLog.error_type}`)
  console.error(`üí¨ –°–û–û–ë–©–ï–ù–ò–ï: ${errorLog.error_message}`)

  if (errorLog.context.endpoint) {
    console.error(`üõ£Ô∏è  ENDPOINT: ${errorLog.context.method} ${errorLog.context.endpoint}`)
  }

  if (errorLog.context.user_id) {
    console.error(`üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨: ${errorLog.context.user_id}`)
  }

  if (Object.keys(errorLog.details).length > 0) {
    console.error(`üìã –î–ï–¢–ê–õ–ò:`)
    console.error(JSON.stringify(errorLog.details, null, 2))
  }

  if (errorLog.context.request_data) {
    console.error(`üì• –î–ê–ù–ù–´–ï –ó–ê–ü–†–û–°–ê:`)
    console.error(JSON.stringify(errorLog.context.request_data, null, 2))
  }

  console.error(`üìö –°–¢–ï–ö –û–®–ò–ë–ö–ò:`)
  console.error(errorLog.error_stack)
  console.error('‚ïê'.repeat(80))

  return errorLog
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞—è–≤–æ–∫
const handleApplicationError = async (error, req, res, context = {}) => {
  const extendedContext = {
    file: 'applications.js',
    endpoint: req.originalUrl,
    method: req.method,
    userId: req.user?.id,
    requestId: req.id || Math.random().toString(36).substring(7),
    request_data: req.body,
    query_params: req.query,
    url_params: req.params,
    ...context,
  }

  // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  const errorLog = logDetailedError(error, extendedContext)

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  try {
    await loggingService.logUserActivity({
      userId: req.user?.id,
      actionType: context.actionType || 'error',
      actionDescription: `Error in ${context.function || 'unknown function'}: ${error.message}`,
      req,
      success: false,
      errorMessage: error.message,
      requestData: {
        endpoint: req.originalUrl,
        method: req.method,
        body: req.body,
        query: req.query,
        params: req.params,
      },
    })
  } catch (loggingError) {
    console.error('üö® –û–®–ò–ë–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø:', loggingError.message)
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  let statusCode = 500
  let userMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'

  switch (error.type) {
    case ERROR_TYPES.VALIDATION:
      statusCode = 400
      userMessage = error.message
      break
    case ERROR_TYPES.PERMISSION:
      statusCode = 403
      userMessage = error.message || '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'
      break
    case ERROR_TYPES.NOT_FOUND:
      statusCode = 404
      userMessage = error.message || '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      break
    case ERROR_TYPES.BUSINESS_LOGIC:
      statusCode = 400
      userMessage = error.message
      break
    case ERROR_TYPES.DATABASE:
      statusCode = 500
      userMessage = '–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
      break
    default:
      statusCode = 500
      userMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
  const response = {
    success: false,
    error: userMessage,
    error_code: error.type,
    timestamp: errorLog.timestamp,
    request_id: extendedContext.requestId,
  }

  // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
  if (process.env.NODE_ENV === 'development') {
    response.debug = {
      original_message: error.message,
      stack: error.stack,
      details: error.details,
      context: extendedContext,
    }
  }

  res.status(statusCode).json(response)
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
const createValidationError = (message, field = null, value = null) => {
  return new ApplicationError(message, ERROR_TYPES.VALIDATION, { field, value })
}

const createNotFoundError = (resource, id = null) => {
  return new ApplicationError(
    `${resource} –Ω–µ –Ω–∞–π–¥–µ–Ω${id ? ` —Å ID: ${id}` : ''}`,
    ERROR_TYPES.NOT_FOUND,
    { resource, id },
  )
}

const createPermissionError = (action, resource = null) => {
  return new ApplicationError(
    `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: ${action}${resource ? ` –Ω–∞ —Ä–µ—Å—É—Ä—Å–µ: ${resource}` : ''}`,
    ERROR_TYPES.PERMISSION,
    { action, resource },
  )
}

const createBusinessLogicError = (message, code = null, data = {}) => {
  return new ApplicationError(message, ERROR_TYPES.BUSINESS_LOGIC, { code, ...data })
}

const createDatabaseError = (operation, table = null, originalError = null) => {
  return new ApplicationError(
    `–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏: ${operation}${table ? ` –≤ —Ç–∞–±–ª–∏—Ü–µ: ${table}` : ''}`,
    ERROR_TYPES.DATABASE,
    { operation, table, original_error: originalError?.message },
  )
}

module.exports = {
  ERROR_TYPES,
  ApplicationError,
  logDetailedError,
  handleApplicationError,
  createValidationError,
  createNotFoundError,
  createPermissionError,
  createBusinessLogicError,
  createDatabaseError,
}
