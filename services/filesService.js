const crypto = require('crypto')
const { query } = require('../config/database')
const {
  initializeBucket: initializeStorage,
  uploadFile,
  getFileUrl,
  getPublicFileUrl,
  getFileUrlByMode,
  deleteFile,
  generateFileName,
  fileExists,
  getFileStream,
} = require('../config/minio')
const {
  FILE_STATUSES,
  FILE_TYPES,
  FILE_LIMITS,
  getFileTypeByFieldName,
} = require('../constants/fileConstants')
const {
  TEMP_LINK_LIMITS,
  TEMP_LINK_STATUSES,
  TEMP_LINK_ERRORS,
} = require('../constants/tempLinkConstants')
const {
  createNotFoundError,
  createPermissionError,
  createBusinessLogicError,
  createDatabaseError,
  createValidationError,
} = require('../utils/errorHandler')

class FilesService {
  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MinIO –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞
    this.initializeStorage()
  }

  async initializeStorage() {
    try {
      await initializeStorage()
      console.log('üì¶ –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ')
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞:', error.message)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserFiles(userId, userRole, filters, pagination) {
    try {
      const { fileType } = filters
      const { pageNum, limitNum } = pagination
      const offset = (pageNum - 1) * limitNum

      let whereClause = 'WHERE user_id = $1 AND status IN ($2, $3) AND deleted_at IS NULL'
      const params = [userId, FILE_STATUSES.ACTIVE, FILE_STATUSES.UPLOADING]
      let paramCount = 3

      if (fileType) {
        whereClause += ` AND file_type = $${++paramCount}`
        params.push(fileType)
      }

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º SQL –∑–∞–ø—Ä–æ—Å - –¥–æ–±–∞–≤–ª—è–µ–º LIMIT –∏ OFFSET
      const result = await query(
        `SELECT 
          id, original_name, file_name, file_type, mime_type, file_size,
          status, is_verified, download_count, created_at, updated_at
         FROM files 
         ${whereClause}
         ORDER BY created_at DESC
         LIMIT $${paramCount + 1} OFFSET $${paramCount + 2}`,
        [...params, limitNum, offset],
      )

      // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const countResult = await query(`SELECT COUNT(*) as total FROM files ${whereClause}`, params)

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è —Ñ–∞–π–ª–æ–≤
      const filesWithUrls = await Promise.all(
        result.rows.map(async (file) => {
          let fileUrl = null
          try {
            fileUrl = getFileUrlByMode(file.file_name, FILE_LIMITS.PRESIGNED_URL_EXPIRY)
          } catch (error) {
            console.error(`üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è —Ñ–∞–π–ª–∞ ${file.file_name}:`, error.message)
          }
          return this.formatFileItem(file, fileUrl)
        }),
      )

      const total = parseInt(countResult.rows[0].total)

      return {
        files: filesWithUrls,
        pagination: {
          page: pageNum,
          limit: limitNum,
          total,
          totalPages: Math.ceil(total / limitNum),
          hasNextPage: pageNum * limitNum < total,
          hasPrevPage: pageNum > 1,
        },
      }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', 'files', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  async getFileById(fileId, userId, userRole, shouldIncrementDownload = false) {
    try {
      const result = await query(
        `SELECT * FROM files 
         WHERE id = $1 AND status IN ($2, $3) AND deleted_at IS NULL`,
        [fileId, FILE_STATUSES.ACTIVE, FILE_STATUSES.UPLOADING],
      )

      if (result.rows.length === 0) {
        throw createNotFoundError('–§–∞–π–ª', fileId)
      }

      const file = result.rows[0]

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      if (file.user_id !== userId) {
        if (!['admin', 'super_admin'].includes(userRole)) {
          throw createPermissionError('–ø—Ä–æ—Å–º–æ—Ç—Ä —á—É–∂–∏—Ö —Ñ–∞–π–ª–æ–≤')
        }
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
      const fileUrl = await getFileUrl(file.file_name, FILE_LIMITS.PRESIGNED_URL_EXPIRY)

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
      if (shouldIncrementDownload) {
        await query(`UPDATE files SET download_count = download_count + 1 WHERE id = $1`, [fileId])
      }

      return this.formatFileDetail(file, fileUrl)
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'files', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ stream –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  async uploadFiles(files, uploadData, userId) {
    try {
      const { fileType, relatedEntityType, relatedEntityId } = uploadData
      const uploadResults = []
      const errors = []

      for (const file of files) {
        try {
          console.log(`üì§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: ${file.originalname}`)
          console.log(`   –†–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç`)
          console.log(`   MIME —Ç–∏–ø: ${file.mimetype}`)

          // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
          const fileHash = this.calculateFileHash(file.buffer)
          const determinedFileType =
            fileType || getFileTypeByFieldName(file.originalname, file.fieldname)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const existingFile = await this.checkExistingFile(userId, fileHash, determinedFileType)

          if (existingFile) {
            // –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const fileUrl = await getFileUrl(
              existingFile.file_name,
              FILE_LIMITS.PRESIGNED_URL_EXPIRY,
            )

            uploadResults.push({
              id: existingFile.id,
              originalName: file.originalname,
              url: fileUrl,
              status: existingFile.status,
              message:
                existingFile.status === FILE_STATUSES.ACTIVE
                  ? '–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
                  : '–§–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏',
            })

            console.log(
              `üìã –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: ${existingFile.file_name} (—Å—Ç–∞—Ç—É—Å: ${existingFile.status})`,
            )
            continue
          }

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
          const minioFileName = generateFileName(file.originalname, userId, determinedFileType)
          console.log(`üìÅ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞: ${minioFileName}`)

          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ MinIO
          console.log(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ MinIO...`)
          const uploadResult = await uploadFile(file.buffer, minioFileName, file.mimetype, {
            'uploaded-by': userId,
            'original-name': Buffer.from(file.originalname, 'utf8').toString('base64'),
          })

          console.log(`‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ MinIO: ${minioFileName}`)

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –ë–î
          const fileRecord = await this.createFileRecord(
            userId,
            file,
            minioFileName,
            determinedFileType,
            fileHash,
            uploadResult,
            relatedEntityType,
            relatedEntityId,
          )

          // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
          const fileUrl = await getFileUrl(minioFileName, FILE_LIMITS.PRESIGNED_URL_EXPIRY)

          uploadResults.push({
            id: fileRecord.id,
            originalName: file.originalname,
            fileName: minioFileName,
            url: fileUrl,
            size: file.size,
            mimeType: file.mimetype,
            createdAt: fileRecord.created_at,
          })
        } catch (fileError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ${file.originalname}:`, fileError.message)
          console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
            fileName: file.originalname,
            fileSize: file.size,
            mimeType: file.mimetype,
            errorMessage: fileError.message,
          })

          errors.push({
            fileName: file.originalname,
            error: fileError.message,
          })
        }
      }

      return { uploadResults, errors }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤', 'files', error)
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
  async deleteFile(fileId, userId, userRole) {
    try {
      const result = await query(
        `SELECT * FROM files 
         WHERE id = $1 AND status IN ($2, $3) AND deleted_at IS NULL`,
        [fileId, FILE_STATUSES.ACTIVE, FILE_STATUSES.UPLOADING],
      )

      if (result.rows.length === 0) {
        throw createNotFoundError('–§–∞–π–ª', fileId)
      }

      const file = result.rows[0]

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      if (file.user_id !== userId) {
        if (!['admin', 'super_admin'].includes(userRole)) {
          throw createPermissionError('—É–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–∏—Ö —Ñ–∞–π–ª–æ–≤')
        }
      }

      // –ú—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤ –ë–î
      await query(`UPDATE files SET status = $1, deleted_at = NOW() WHERE id = $2`, [
        FILE_STATUSES.DELETED,
        fileId,
      ])

      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ MinIO (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      try {
        await deleteFile(file.file_name)
        console.log(`üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ MinIO: ${file.file_name}`)
      } catch (minioError) {
        console.error('üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ MinIO:', minioError.message)
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø–∏—Å—å –≤ –ë–î —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞
      }

      return {
        deletedFile: {
          id: file.id,
          originalName: file.original_name,
          fileName: file.file_name,
        },
      }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞', 'files', error)
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async getUserFilesForAdmin(targetUserId, userRole, filters) {
    try {
      if (!['admin', 'super_admin'].includes(userRole)) {
        throw createPermissionError(
          '–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
          '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        )
      }

      const { fileType } = filters
      let whereClause = 'WHERE f.user_id = $1 AND f.status = $2 AND f.deleted_at IS NULL'
      const params = [targetUserId, FILE_STATUSES.ACTIVE]
      let paramCount = 2

      if (fileType) {
        whereClause += ` AND f.file_type = $${++paramCount}`
        params.push(fileType)
      }

      const result = await query(
        `SELECT 
          f.id, f.original_name, f.file_name, f.file_type, f.mime_type, f.file_size,
          f.is_verified, f.download_count, f.created_at,
          u.first_name, u.last_name, u.email
         FROM files f
         JOIN users u ON f.user_id = u.id
         ${whereClause}
         ORDER BY f.created_at DESC`,
        params,
      )

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ URL –¥–ª—è —Ñ–∞–π–ª–æ–≤
      const filesWithUrls = await Promise.all(
        result.rows.map(async (file) => {
          let fileUrl = null
          try {
            fileUrl = await getFileUrl(file.file_name, FILE_LIMITS.PRESIGNED_URL_EXPIRY)
          } catch (error) {
            console.error(`üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –¥–ª—è —Ñ–∞–π–ª–∞ ${file.file_name}:`, error.message)
          }

          return {
            ...this.formatFileItem(file, fileUrl),
            user: {
              firstName: file.first_name,
              lastName: file.last_name,
              email: file.email,
            },
          }
        }),
      )

      return { files: filesWithUrls }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞', 'files', error)
    }
  }

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  async verifyFile(fileId, userRole, userId, verified) {
    try {
      if (!['admin', 'super_admin'].includes(userRole)) {
        throw createPermissionError('–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Ñ–∞–π–ª–æ–≤', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }

      const result = await query(
        `UPDATE files 
         SET is_verified = $1, verified_by = $2, verified_at = NOW()
         WHERE id = $3 AND status = $4 AND deleted_at IS NULL
         RETURNING original_name`,
        [verified, userId, fileId, FILE_STATUSES.ACTIVE],
      )

      if (result.rows.length === 0) {
        throw createNotFoundError('–ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏', fileId)
      }

      return {
        fileName: result.rows[0].original_name,
        verified,
      }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞', 'files', error)
    }
  }

  // –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
  async activateFiles(fileIds, userId, relatedEntityType, relatedEntityId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const filesCheck = await query(
        `SELECT id, file_name, original_name, status FROM files 
         WHERE id = ANY($1) AND user_id = $2 AND deleted_at IS NULL`,
        [fileIds, userId],
      )

      if (filesCheck.rows.length !== fileIds.length) {
        throw createBusinessLogicError(
          '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –≤–∞–º',
          'FILES_NOT_FOUND_OR_ACCESS_DENIED',
          {
            requestedCount: fileIds.length,
            foundCount: filesCheck.rows.length,
            fileIds,
          },
        )
      }

      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å
      const activatedFiles = await query(
        `UPDATE files 
         SET status = $1, 
             related_entity_type = $2,
             related_entity_id = $3,
             updated_at = NOW()
         WHERE id = ANY($4) AND user_id = $5 AND deleted_at IS NULL
         RETURNING id, file_name, original_name, file_type, status`,
        [FILE_STATUSES.ACTIVE, relatedEntityType, relatedEntityId, fileIds, userId],
      )

      return {
        activatedFiles: activatedFiles.rows,
        count: activatedFiles.rows.length,
      }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤', 'files', error)
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
  async cleanupOldFiles(userRole, userId, daysOld) {
    try {
      if (!['admin', 'super_admin'].includes(userRole)) {
        throw createPermissionError('–æ—á–∏—Å—Ç–∫—É —Ñ–∞–π–ª–æ–≤', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }

      // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const oldFiles = await query(
        `SELECT id, file_name, original_name, user_id, created_at 
         FROM files 
         WHERE status = $1 
         AND created_at < NOW() - INTERVAL '${parseInt(daysOld)} days'
         AND deleted_at IS NULL`,
        [FILE_STATUSES.UPLOADING],
      )

      const deletedFiles = []
      const errors = []

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
      for (const file of oldFiles.rows) {
        try {
          // –£–¥–∞–ª—è–µ–º –∏–∑ MinIO
          await deleteFile(file.file_name)

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤ –ë–î
          await query(`UPDATE files SET status = $1, deleted_at = NOW() WHERE id = $2`, [
            FILE_STATUSES.DELETED,
            file.id,
          ])

          deletedFiles.push({
            id: file.id,
            name: file.original_name,
            createdAt: file.created_at,
          })
        } catch (error) {
          console.error(`üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file.file_name}:`, error.message)
          errors.push({
            id: file.id,
            name: file.original_name,
            error: error.message,
          })
        }
      }

      return {
        deleted: deletedFiles,
        errors,
        total: oldFiles.rows.length,
      }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤', 'files', error)
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
  async cleanupDuplicateFiles(userRole, userId) {
    try {
      if (!['admin', 'super_admin'].includes(userRole)) {
        throw createPermissionError('–æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
      }

      // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ —Ö–µ—à—É —Ñ–∞–π–ª–∞
      const duplicates = await query(
        `WITH ranked_files AS (
          SELECT 
            id, file_name, original_name, user_id, file_hash, file_type, created_at, status,
            ROW_NUMBER() OVER (PARTITION BY user_id, file_hash, file_type ORDER BY created_at ASC) as rn
          FROM files 
          WHERE status IN ($1, $2) AND deleted_at IS NULL
        )
        SELECT * FROM ranked_files WHERE rn > 1`,
        [FILE_STATUSES.ACTIVE, FILE_STATUSES.UPLOADING],
      )

      const deletedFiles = []
      const errors = []

      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª)
      for (const file of duplicates.rows) {
        try {
          // –£–¥–∞–ª—è–µ–º –∏–∑ MinIO
          await deleteFile(file.file_name)

          // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤ –ë–î
          await query(`UPDATE files SET status = $1, deleted_at = NOW() WHERE id = $2`, [
            FILE_STATUSES.DELETED,
            file.id,
          ])

          deletedFiles.push({
            id: file.id,
            name: file.original_name,
            userId: file.user_id,
            createdAt: file.created_at,
          })
        } catch (error) {
          console.error(`üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞ ${file.file_name}:`, error.message)
          errors.push({
            id: file.id,
            name: file.original_name,
            error: error.message,
          })
        }
      }

      return {
        deleted: deletedFiles,
        errors,
        total: duplicates.rows.length,
      }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤', 'files', error)
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
  calculateFileHash(buffer) {
    return crypto.createHash('sha256').update(buffer).digest('hex')
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
  async checkExistingFile(userId, fileHash, fileType) {
    const result = await query(
      `SELECT id, file_name, status FROM files 
       WHERE user_id = $1 AND file_hash = $2 AND file_type = $3 
       AND status IN ($4, $5) AND deleted_at IS NULL`,
      [userId, fileHash, fileType, FILE_STATUSES.ACTIVE, FILE_STATUSES.UPLOADING],
    )

    return result.rows.length > 0 ? result.rows[0] : null
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ –≤ –ë–î
  async createFileRecord(
    userId,
    file,
    minioFileName,
    fileType,
    fileHash,
    uploadResult,
    relatedEntityType,
    relatedEntityId,
  ) {
    const result = await query(
      `INSERT INTO files (
        user_id, related_entity_type, related_entity_id,
        original_name, file_name, file_type, mime_type, file_size,
        file_hash, public_url, status, metadata
      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
      RETURNING id, created_at`,
      [
        userId,
        relatedEntityType || 'user',
        relatedEntityId || userId,
        file.originalname,
        minioFileName,
        fileType,
        file.mimetype,
        file.size,
        fileHash,
        getPublicFileUrl(minioFileName),
        FILE_STATUSES.UPLOADING, // –í—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        JSON.stringify({
          etag: uploadResult.etag,
          uploadedAt: new Date().toISOString(),
        }),
      ],
    )

    return result.rows[0]
  }

  // === –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• ===

  formatFileItem(file, fileUrl) {
    return {
      id: file.id,
      originalName: file.original_name,
      fileName: file.file_name,
      fileType: file.file_type,
      mimeType: file.mime_type,
      fileSize: file.file_size,
      status: file.status,
      isVerified: file.is_verified,
      downloadCount: file.download_count,
      createdAt: file.created_at,
      updatedAt: file.updated_at,
      url: fileUrl,
    }
  }

  formatFileDetail(file, fileUrl) {
    return {
      id: file.id,
      originalName: file.original_name,
      fileName: file.file_name,
      fileType: file.file_type,
      mimeType: file.mime_type,
      fileSize: file.file_size,
      url: fileUrl,
      isVerified: file.is_verified,
      downloadCount: file.download_count,
      createdAt: file.created_at,
      updatedAt: file.updated_at,
      relatedEntityType: file.related_entity_type,
      relatedEntityId: file.related_entity_id,
      metadata: file.metadata,
    }
  }

  // === –ú–ï–¢–û–î–´ –î–õ–Ø –í–†–ï–ú–ï–ù–ù–´–• –°–°–´–õ–û–ö ===

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
  async generateTempLink(
    fileId,
    userId,
    userRole,
    expiryHours = TEMP_LINK_LIMITS.DEFAULT_EXPIRY_HOURS,
  ) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      const result = await query(
        `SELECT * FROM files 
         WHERE id = $1 AND status IN ($2, $3) AND deleted_at IS NULL`,
        [fileId, FILE_STATUSES.ACTIVE, FILE_STATUSES.UPLOADING],
      )

      if (result.rows.length === 0) {
        throw createNotFoundError('–§–∞–π–ª', fileId)
      }

      const file = result.rows[0]

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
      if (file.user_id !== userId) {
        if (!['admin', 'super_admin'].includes(userRole)) {
          throw createPermissionError('—Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è —á—É–∂–∏—Ö —Ñ–∞–π–ª–æ–≤')
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏
      if (
        expiryHours < TEMP_LINK_LIMITS.MIN_EXPIRY_HOURS ||
        expiryHours > TEMP_LINK_LIMITS.MAX_EXPIRY_HOURS
      ) {
        throw createValidationError(
          `–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${TEMP_LINK_LIMITS.MIN_EXPIRY_HOURS} –¥–æ ${TEMP_LINK_LIMITS.MAX_EXPIRY_HOURS} —á–∞—Å–æ–≤`,
          'INVALID_EXPIRY_TIME',
          { min: TEMP_LINK_LIMITS.MIN_EXPIRY_HOURS, max: TEMP_LINK_LIMITS.MAX_EXPIRY_HOURS },
        )
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const activeLinksCount = await query(
        `SELECT COUNT(*) as count FROM temp_download_links 
         WHERE created_by = $1 AND expires_at > NOW() AND is_used = FALSE`,
        [userId],
      )

      if (parseInt(activeLinksCount.rows[0].count) >= TEMP_LINK_LIMITS.MAX_ACTIVE_LINKS_PER_USER) {
        throw createBusinessLogicError(
          `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ (${TEMP_LINK_LIMITS.MAX_ACTIVE_LINKS_PER_USER})`,
          'TOO_MANY_ACTIVE_LINKS',
        )
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª
      const fileLinksCount = await query(
        `SELECT COUNT(*) as count FROM temp_download_links 
         WHERE file_id = $1 AND expires_at > NOW() AND is_used = FALSE`,
        [fileId],
      )

      if (parseInt(fileLinksCount.rows[0].count) >= TEMP_LINK_LIMITS.MAX_LINKS_PER_FILE) {
        throw createBusinessLogicError(
          `–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–∞–π–ª (${TEMP_LINK_LIMITS.MAX_LINKS_PER_FILE})`,
          'TOO_MANY_FILE_LINKS',
        )
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
      const token = this.generateSecureToken()
      const expiresAt = new Date(Date.now() + expiryHours * 60 * 60 * 1000)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –≤ –ë–î
      await query(
        `INSERT INTO temp_download_links (file_id, token, created_by, expires_at)
         VALUES ($1, $2, $3, $4)`,
        [fileId, token, userId, expiresAt],
      )

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const baseUrl = process.env.API_BASE_URL || 'http://localhost:3000'
      const tempLink = `${baseUrl}/api/files/download/temp/${token}`

      console.log(`üîó –°–æ–∑–¥–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ ${file.original_name}: ${tempLink}`)

      return {
        tempLink,
        expiresAt,
        fileName: file.original_name,
      }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏', 'temp_download_links', error)
    }
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ
  async downloadFileByTempLink(token, req) {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É
      const linkResult = await query(
        `SELECT tdl.*, f.original_name, f.file_name, f.mime_type, f.file_size, f.status
         FROM temp_download_links tdl
         JOIN files f ON tdl.file_id = f.id
         WHERE tdl.token = $1 
         AND tdl.expires_at > NOW()
         AND tdl.is_used = FALSE
         AND f.status IN ($2, $3)
         AND f.deleted_at IS NULL`,
        [token, FILE_STATUSES.ACTIVE, FILE_STATUSES.UPLOADING],
      )

      if (linkResult.rows.length === 0) {
        throw createNotFoundError('–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞', token)
      }

      const link = linkResult.rows[0]

      // –ü–æ–º–µ—á–∞–µ–º —Å—Å—ã–ª–∫—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
      await query(
        `UPDATE temp_download_links 
         SET is_used = TRUE, used_at = NOW(), used_ip = $1
         WHERE id = $2`,
        [this.getClientIP(req), link.id],
      )

      // –ü–æ–ª—É—á–∞–µ–º stream —Ñ–∞–π–ª–∞ –∏–∑ MinIO
      const fileStream = await getFileStream(link.file_name)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π —Ñ–∞–π–ª–∞
      await query(`UPDATE files SET download_count = download_count + 1 WHERE id = $1`, [
        link.file_id,
      ])

      console.log(`üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ: ${link.original_name}`)

      return {
        stream: fileStream,
        fileName: link.original_name,
        mimeType: link.mime_type,
        fileSize: link.file_size,
      }
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError(
        '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ',
        'temp_download_links',
        error,
      )
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
  async cleanupExpiredTempLinks() {
    try {
      const result = await query(
        `DELETE FROM temp_download_links 
         WHERE expires_at < NOW() OR is_used = TRUE`,
      )

      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.rowCount} –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫`)
      return result.rowCount
    } catch (error) {
      console.error('üö® –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:', error.message)
      throw error
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏
  async deleteTempLink(tempLinkId, userId) {
    try {
      const result = await query(
        `DELETE FROM temp_download_links 
         WHERE id = $1 AND created_by = $2 
         RETURNING id`,
        [tempLinkId, userId],
      )

      if (result.rows.length === 0) {
        throw createNotFoundError('–í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', 'temp_link')
      }

      console.log(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ ${tempLinkId} —É–¥–∞–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`)
      return true
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏:', error)
      throw error
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getTempLinksStats(userId, userRole) {
    try {
      let whereClause = 'WHERE tdl.created_by = $1'
      const params = [userId]

      // –ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏
      if (['admin', 'super_admin'].includes(userRole)) {
        whereClause = ''
        params.length = 0
      }

      const result = await query(
        `SELECT 
          tdl.id, tdl.token, tdl.expires_at, tdl.is_used, tdl.used_at, tdl.created_at,
          f.original_name, f.file_name, f.file_type
         FROM temp_download_links tdl
         JOIN files f ON tdl.file_id = f.id
         ${whereClause}
         ORDER BY tdl.created_at DESC`,
        params,
      )

      return result.rows.map((row) => ({
        id: row.id,
        token: row.token,
        expiresAt: row.expires_at,
        isUsed: row.is_used,
        usedAt: row.used_at,
        createdAt: row.created_at,
        fileName: row.original_name,
        fileType: row.file_type,
        isExpired: new Date(row.expires_at) < new Date(),
      }))
    } catch (error) {
      if (error.type) throw error
      throw createDatabaseError(
        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫',
        'temp_download_links',
        error,
      )
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
  generateSecureToken() {
    return crypto.randomBytes(32).toString('hex')
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
  getClientIP(req) {
    // IP –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –∏–∑ middleware
    return req?.clientIP || '127.0.0.1'
  }
}

module.exports = new FilesService()
