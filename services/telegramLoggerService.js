const axios = require('axios')
const { logger } = require('../utils/logger')

class TelegramLoggerService {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN
    this.chatId = process.env.TELEGRAM_CHAT_ID
    this.enabled = process.env.TELEGRAM_LOGGING_ENABLED === 'true'
    this.logLevel = process.env.TELEGRAM_LOG_LEVEL || 'info' // –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ info –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    this.terminalMode = process.env.TELEGRAM_TERMINAL_MODE === 'true' // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º —Ç–µ—Ä–º–∏–Ω–∞–ª–∞

    // –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    this.logLevels = {
      error: 0,
      warn: 1,
      info: 2,
      debug: 3,
    }

    // –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    this.emoji = {
      error: 'üî¥',
      warn: 'üü°',
      info: 'üîµ',
      debug: '‚ö™',
      success: 'üü¢',
      security: 'üîí',
      performance: '‚ö°',
      user: 'üë§',
      system: 'üñ•Ô∏è',
      database: 'üíæ',
      file: 'üìÅ',
      auth: 'üîê',
      api: 'üåê',
      request: 'üì•',
      response: 'üì§',
      sql: 'üóÉÔ∏è',
    }

    // –í —Ä–µ–∂–∏–º–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é
    if (this.terminalMode) {
      this.messageBuffer = []
      this.bufferTimer = null
      this.bufferTimeout = 0 // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    } else {
      // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      this.messageCounters = {
        error: 0,
        warn: 0,
        info: 0,
      }

      // –ë—É—Ñ–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      this.messageBuffer = []
      this.bufferTimer = null
      this.bufferTimeout = 5000 // 5 —Å–µ–∫—É–Ω–¥
    }

    this.init()
  }

  init() {
    try {
      if (!this.enabled) {
        logger.info('Telegram logging is disabled')
        return
      }

      if (!this.botToken || !this.chatId) {
        logger.warn('Telegram bot token or chat ID not configured')
        return
      }

      logger.info('Telegram logging service initialized')

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –∏ chat ID
      if (this.botToken && this.chatId) {
        this.sendStartupMessage().catch((error) => {
          logger.error('Failed to send startup message:', error.message)
        })
      }
    } catch (error) {
      logger.error('Error initializing Telegram logging service:', error.message)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞
  async sendStartupMessage() {
    const message = this.formatStartupMessage()
    await this.sendTelegramMessage(message)
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ
  formatStartupMessage() {
    const timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    })

    return `${this.emoji.system} <b>–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞</b>

üìÖ <b>–î–∞—Ç–∞:</b> ${timestamp}
üåç <b>–û–∫—Ä—É–∂–µ–Ω–∏–µ:</b> ${process.env.NODE_ENV || 'development'}
üîß <b>–í–µ—Ä—Å–∏—è:</b> ${process.env.npm_package_version || '1.0.0'}
üìä <b>–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:</b> ${this.logLevel.toUpperCase()}

–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! üöÄ`
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  async log(level, message, data = {}) {
    if (!this.enabled || !this.shouldLog(level)) {
      return
    }

    try {
      if (this.terminalMode) {
        // –í —Ä–µ–∂–∏–º–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
        const formattedMessage = this.formatTerminalMessage(level, message, data)
        await this.sendTelegramMessage(formattedMessage)
      } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π
        const formattedMessage = this.formatMessage(level, message, data)
        this.addToBuffer(level, formattedMessage)
      }
    } catch (error) {
      logger.error('Error in Telegram logging:', error)
    }
  }

  // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—Ç–∏–ª–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  formatTerminalMessage(level, message, data = {}) {
    const timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      fractionalSecondDigits: 3,
    })

    const emoji = this.getEmojiForTerminal(level, data)

    // –§–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: –≤—Ä–µ–º—è [—É—Ä–æ–≤–µ–Ω—å] —Å–æ–æ–±—â–µ–Ω–∏–µ
    let terminalMessage = `<code>${timestamp} ${emoji} ${message}</code>`

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    if (data.method && data.url) {
      terminalMessage += `\n<b>${data.method}</b> <code>${data.url}</code>`
    }

    if (data.statusCode) {
      const statusEmoji = data.statusCode >= 400 ? '‚ùå' : '‚úÖ'
      terminalMessage += ` ${statusEmoji} <code>${data.statusCode}</code>`
    }

    if (data.duration) {
      terminalMessage += ` ‚è±Ô∏è <code>${data.duration}</code>`
    }

    if (data.ip) {
      terminalMessage += `\nüåê <code>${data.ip}</code>`
    }

    if (data.userId && data.userId !== 'anonymous') {
      terminalMessage += ` üë§ <code>user:${data.userId}</code>`
    }

    if (data.error) {
      terminalMessage += `\n‚ùå <code>${data.error}</code>`
    }

    if (data.sql) {
      terminalMessage += `\nüíæ <code>${data.sql}</code>`
    }

    return terminalMessage
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  getEmojiForTerminal(level, data = {}) {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    if (data.type === 'request') return this.emoji.request
    if (data.type === 'response') return this.emoji.response
    if (data.type === 'sql') return this.emoji.sql
    if (data.type === 'security') return this.emoji.security
    if (data.type === 'performance') return this.emoji.performance
    if (data.type === 'database') return this.emoji.database
    if (data.type === 'file') return this.emoji.file
    if (data.type === 'auth') return this.emoji.auth
    if (data.type === 'api') return this.emoji.api

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    return this.emoji[level] || this.emoji.info
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –¥–∞–Ω–Ω–æ–º —É—Ä–æ–≤–Ω–µ
  shouldLog(level) {
    return this.logLevels[level] <= this.logLevels[this.logLevel]
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
  addToBuffer(level, message) {
    this.messageBuffer.push({ level, message, timestamp: Date.now() })
    this.messageCounters[level]++

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—É—Ñ–µ—Ä–∞
    if (!this.bufferTimer) {
      this.bufferTimer = setTimeout(() => {
        this.flushBuffer()
      }, this.bufferTimeout)
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –±—É—Ñ–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  async flushBuffer() {
    if (this.messageBuffer.length === 0) {
      return
    }

    try {
      const groupedMessage = this.groupMessages()
      await this.sendTelegramMessage(groupedMessage)

      // –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
      this.messageBuffer = []
      this.messageCounters = { error: 0, warn: 0, info: 0 }
      this.bufferTimer = null
    } catch (error) {
      logger.error('Error flushing Telegram message buffer:', error)
    }
  }

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
  groupMessages() {
    const timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    })

    let message = `üìä <b>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã (${timestamp})</b>\n\n`

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º
    const grouped = {}
    this.messageBuffer.forEach((item) => {
      if (!grouped[item.level]) {
        grouped[item.level] = []
      }
      grouped[item.level].push(item.message)
    })

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    if (this.messageCounters.error > 0) {
      message += `${this.emoji.error} <b>–û—à–∏–±–∫–∏:</b> ${this.messageCounters.error}\n`
    }
    if (this.messageCounters.warn > 0) {
      message += `${this.emoji.warn} <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b> ${this.messageCounters.warn}\n`
    }
    if (this.messageCounters.info > 0) {
      message += `${this.emoji.info} <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> ${this.messageCounters.info}\n`
    }

    message += '\n'

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 3 –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
    Object.keys(grouped).forEach((level) => {
      const messages = grouped[level].slice(0, 3)
      messages.forEach((msg) => {
        message += msg + '\n'
      })

      if (grouped[level].length > 3) {
        message += `... –∏ –µ—â–µ ${grouped[level].length - 3} —Å–æ–æ–±—â–µ–Ω–∏–π\n`
      }
    })

    return message
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  formatMessage(level, message, data = {}) {
    const timestamp = new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Moscow',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
    })

    let formattedMessage = `${this.getEmoji(level, data)} <b>${this.getLevelName(level)}</b> (${timestamp})\n`
    formattedMessage += `${message}\n`

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (data.userId) {
      formattedMessage += `${this.emoji.user} <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${data.userId}\n`
    }

    if (data.ip) {
      formattedMessage += `üåê <b>IP:</b> ${data.ip}\n`
    }

    if (data.url) {
      formattedMessage += `üîó <b>URL:</b> ${data.url}\n`
    }

    if (data.method) {
      formattedMessage += `üì° <b>–ú–µ—Ç–æ–¥:</b> ${data.method}\n`
    }

    if (data.duration) {
      formattedMessage += `${this.emoji.performance} <b>–í—Ä–µ–º—è:</b> ${data.duration}\n`
    }

    if (data.error) {
      formattedMessage += `‚ùå <b>–û—à–∏–±–∫–∞:</b> ${data.error}\n`
    }

    return formattedMessage
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω—è –∏ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
  getEmoji(level, data = {}) {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
    if (data.type === 'security') return this.emoji.security
    if (data.type === 'performance') return this.emoji.performance
    if (data.type === 'database') return this.emoji.database
    if (data.type === 'file') return this.emoji.file
    if (data.type === 'auth') return this.emoji.auth
    if (data.type === 'api') return this.emoji.api

    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    return this.emoji[level] || this.emoji.info
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  getLevelName(level) {
    const names = {
      error: '–û–®–ò–ë–ö–ê',
      warn: '–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï',
      info: '–ò–ù–§–û–†–ú–ê–¶–ò–Ø',
      debug: '–û–¢–õ–ê–î–ö–ê',
    }
    return names[level] || level.toUpperCase()
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  async sendTelegramMessage(message) {
    try {
      const url = `https://api.telegram.org/bot${this.botToken}/sendMessage`

      const response = await axios.post(url, {
        chat_id: this.chatId,
        text: message,
        parse_mode: 'HTML',
        disable_web_page_preview: true,
      })

      if (response.data.ok) {
        logger.debug('Telegram message sent successfully')
      } else {
        logger.error('Failed to send Telegram message:', response.data)
      }
    } catch (error) {
      logger.error('Error sending Telegram message:', error.message)
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  async logError(message, data = {}) {
    await this.log('error', message, { ...data, type: 'error' })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  async logWarning(message, data = {}) {
    await this.log('warn', message, { ...data, type: 'warning' })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  async logInfo(message, data = {}) {
    await this.log('info', message, { ...data, type: 'info' })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏
  async logDebug(message, data = {}) {
    await this.log('debug', message, { ...data, type: 'debug' })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  async logSecurity(event, data = {}) {
    await this.log('warn', `–°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${event}`, { ...data, type: 'security' })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  async logPerformance(operation, duration, data = {}) {
    await this.log('info', `–û–ø–µ—Ä–∞—Ü–∏—è: ${operation}`, {
      ...data,
      type: 'performance',
      duration: `${duration}ms`,
    })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
  async logUserAction(action, userId, data = {}) {
    await this.log('info', `–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${action}`, {
      ...data,
      type: 'user',
      userId,
    })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
  async logApiRequest(method, url, statusCode, duration, data = {}) {
    if (this.terminalMode) {
      // –í —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –≤ –ª–æ–≥–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞
      const level = statusCode >= 400 ? 'warn' : 'info'
      await this.log(level, `HTTP Request`, {
        ...data,
        type: 'request',
        method,
        url,
        statusCode,
        duration: `${duration}ms`,
      })
    } else {
      // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
      const level = statusCode >= 400 ? 'warn' : 'info'
      await this.log(level, `API ${method} ${url}`, {
        ...data,
        type: 'api',
        method,
        url,
        statusCode,
        duration: `${duration}ms`,
      })
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞)
  async logSqlQuery(query, duration, data = {}) {
    if (this.terminalMode) {
      await this.log('info', 'SQL Query', {
        ...data,
        type: 'sql',
        sql: query.length > 100 ? query.substring(0, 100) + '...' : query,
        duration: `${duration}ms`,
      })
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞—á–∞–ª–æ)
  async logRequestStart(method, url, data = {}) {
    if (this.terminalMode) {
      await this.log('info', 'Request Started', {
        ...data,
        type: 'request',
        method,
        url,
      })
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  async logRequestEnd(method, url, statusCode, duration, data = {}) {
    if (this.terminalMode) {
      await this.log('info', 'Request Completed', {
        ...data,
        type: 'response',
        method,
        url,
        statusCode,
        duration: `${duration}ms`,
      })
    }
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async logDatabase(operation, table, duration, data = {}) {
    await this.log('info', `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${operation} –≤ —Ç–∞–±–ª–∏—Ü–µ ${table}`, {
      ...data,
      type: 'database',
      operation,
      table,
      duration: `${duration}ms`,
    })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  async logFileOperation(operation, filename, data = {}) {
    await this.log('info', `–§–∞–π–ª: ${operation} ${filename}`, {
      ...data,
      type: 'file',
      operation,
      filename,
    })
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async logAuth(action, userId, success, data = {}) {
    const message = `–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ${action} ${success ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ—É–¥–∞—á–Ω–æ'}`
    const level = success ? 'info' : 'warn'

    await this.log(level, message, {
      ...data,
      type: 'auth',
      userId,
      success,
    })
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –±—É—Ñ–µ—Ä–∞
  async forceFlush() {
    if (this.bufferTimer) {
      clearTimeout(this.bufferTimer)
      this.bufferTimer = null
    }
    await this.flushBuffer()
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  getStats() {
    return {
      enabled: this.enabled,
      logLevel: this.logLevel,
      messageCounters: { ...this.messageCounters },
      bufferSize: this.messageBuffer.length,
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const telegramLogger = new TelegramLoggerService()

module.exports = telegramLogger
