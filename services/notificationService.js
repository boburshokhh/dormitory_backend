const nodemailer = require('nodemailer')
const crypto = require('crypto')

class NotificationService {
  constructor() {
    this.setupEmailTransporter()
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ email —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
  setupEmailTransporter() {
    this.emailTransporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST || 'mail.gubkin.uz',
      port: process.env.SMTP_PORT || 587,
      secure: process.env.SMTP_SECURE === 'true',
      auth: {
        user: process.env.SMTP_USER || 'dps@gubkin.uz',
        pass: process.env.SMTP_PASS || '1234bobur$',
      },
      tls: {
        rejectUnauthorized: false, // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      },
    })
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞
  generateVerificationCode() {
    return Math.floor(100000 + Math.random() * 900000).toString()
  }

  // –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
  hashCode(code) {
    return crypto.createHash('sha256').update(code).digest('hex')
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –∫–æ–¥–æ–º
  async sendEmailCode(email, code) {
    try {
      console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ email –∫–æ–¥–∞ –Ω–∞ ${email}: ${code}`)

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥, –Ω–æ –¢–ê–ö–ñ–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email
      if (process.env.NODE_ENV === 'development') {
        console.log(`üî¢ [DEV MODE] –ö–æ–¥ –¥–ª—è ${email}: ${code}`)
        console.log(`üì§ [DEV MODE] –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π email...`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
      if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
        console.log(`‚ö†Ô∏è SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞: ${code}`)
        return { success: true, messageId: 'no-smtp-config' }
      }

      const fromAddress = process.env.SMTP_USER
      const mailOptions = {
        from: fromAddress,
        to: email,
        envelope: {
          from: fromAddress,
          to: email,
        },
        subject: 'üîê –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Ö–æ–¥–∞',
        html: `
          <div style="max-width: 600px; margin: 0 auto; font-family: 'Segoe UI', Arial, sans-serif;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
              <img src="https://www.priem.gubkin.uz/assets/gubkin_logo-75ce35e1.png" alt="–õ–æ–≥–æ—Ç–∏–ø –ì—É–±–∫–∏–Ω" style="height: 56px; margin-bottom: 12px;" />
              <h1 style="color: white; margin: 0; font-size: 24px;">–î–æ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h1>
              <p style="color: rgba(255,255,255,0.9); margin: 10px 0 0 0; font-size: 14px;">–§–∏–ª–∏–∞–ª –†–ì–£ –Ω–µ—Ñ—Ç–∏ –∏ –≥–∞–∑–∞ (–ù–ò–£) –∏–º–µ–Ω–∏ –ò.–ú. –ì—É–±–∫–∏–Ω–∞ –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç–µ</p>
            </div>
            
            <div style="background: white; padding: 40px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.1);">
              <h2 style="color: #333; text-align: center; margin-bottom: 30px;">–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</h2>
              
              <div style="background: #f8f9ff; border: 2px dashed #667eea; border-radius: 10px; padding: 30px; text-align: center; margin: 30px 0;">
                <div style="font-size: 36px; font-weight: bold; color: #667eea; letter-spacing: 8px; font-family: 'Courier New', monospace;">
                  ${code}
                </div>
                <p style="color: #666; margin: 15px 0 0 0; font-size: 14px;">–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</p>
              </div>
              
              <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin: 30px 0;">
                <p style="margin: 0; color: #856404; font-size: 14px;">
                  <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong><br>
                  ‚Ä¢ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ <strong>10 –º–∏–Ω—É—Ç</strong><br>
                  ‚Ä¢ –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –∫–æ–¥ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º<br>
                  ‚Ä¢ –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –∫–æ–¥, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ
                </p>
              </div>
              
              <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
              
              <p style="color: #999; font-size: 12px; text-align: center; margin: 0;">
                ¬© 2024 –î–æ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –§–∏–ª–∏–∞–ª –†–ì–£ –Ω–µ—Ñ—Ç–∏ –∏ –≥–∞–∑–∞ (–ù–ò–£) –∏–º–µ–Ω–∏ –ò.–ú. –ì—É–±–∫–∏–Ω–∞ –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç–µ.<br>
                –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
              </p>
            </div>
          </div>
        `,
      }

      const info = await this.emailTransporter.sendMail(mailOptions)
      console.log(`‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`)
      console.log(`üìß Message ID: ${info.messageId}`)
      console.log(`üî¢ –ö–æ–¥ –≤ –ø–∏—Å—å–º–µ: ${code}`)
      return { success: true, messageId: info.messageId }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –Ω–∞', email)
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message)
      console.error('‚ùå SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', {
        host: process.env.SMTP_HOST,
        port: process.env.SMTP_PORT,
        user: process.env.SMTP_USER,
        secure: process.env.SMTP_SECURE,
      })
      return { success: false, error: error.message }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å –∫–æ–¥–æ–º (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
  async sendSMSCode(phone, code) {
    try {
      console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ –Ω–∞ ${phone}: ${code}`)

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥
      if (process.env.NODE_ENV === 'development') {
        console.log(`üî¢ [DEV MODE] SMS –∫–æ–¥ –¥–ª—è ${phone}: ${code}`)
        return { success: true, messageId: 'dev-sms-mode' }
      }

      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Twilio, SMS.ru, etc.)
      // –ü—Ä–∏–º–µ—Ä –¥–ª—è SMS.ru:
      /*
      const smsru = require('sms_ru');
      const sms = new smsru(process.env.SMS_RU_API_KEY);
      
      const result = await sms.sms_send({
        to: phone,
        msg: `–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ì–£–ë–ö–ò–ù: ${code}. –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –µ–≥–æ –Ω–∏–∫–æ–º—É!`,
        from: 'GUBKIN'
      });
      */

      // –ü–æ–∫–∞ —á—Ç–æ –∑–∞–≥–ª—É—à–∫–∞
      console.log(`üì± [–ó–ê–ì–õ–£–®–ö–ê] SMS –∫–æ–¥ –¥–ª—è ${phone}: ${code}`)
      return { success: true, messageId: 'mock-sms' }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:', error)
      return { success: false, error: error.message }
    }
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞)
  async sendVerificationCode(contact, contactType) {
    const code = this.generateVerificationCode()
    let result

    if (contactType === 'email') {
      result = await this.sendEmailCode(contact, code)
    } else if (contactType === 'phone') {
      result = await this.sendSMSCode(contact, code)
    } else {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–∞–∫—Ç–∞')
    }

    return {
      code: code,
      hashedCode: this.hashCode(code),
      result: result,
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
  verifyCode(inputCode, hashedCode) {
    const inputHash = this.hashCode(inputCode)
    console.log(
      `üîç verifyCode: –≤–≤–µ–¥–µ–Ω–æ="${inputCode}", —Ö—ç—à –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ="${inputHash}", —Ö—ç—à –≤ –ë–î="${hashedCode}"`,
    )
    const result = inputHash === hashedCode
    console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${result}`)
    return result
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º
  async sendPasswordResetEmail(email, newPassword) {
    try {
      console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –Ω–∞ ${email}`)

      // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å, –Ω–æ –¢–ê–ö–ñ–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º email
      if (process.env.NODE_ENV === 'development') {
        console.log(`üîë [DEV MODE] –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è ${email}: ${newPassword}`)
        console.log(`üì§ [DEV MODE] –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π email...`)
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP
      if (!process.env.SMTP_USER || !process.env.SMTP_PASS) {
        console.log(`‚ö†Ô∏è SMTP –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è: ${newPassword}`)
        return { success: true, messageId: 'no-smtp-config' }
      }

      const fromAddress = process.env.SMTP_USER
      const mailOptions = {
        from: fromAddress,
        to: email,
        envelope: {
          from: fromAddress,
          to: email,
        },
        subject: 'üîê –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É',
        html: `
          <div style="max-width: 600px; margin: 0 auto; font-family: 'Segoe UI', Arial, sans-serif;">
            <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
              <img src="https://www.priem.gubkin.uz/assets/gubkin_logo-75ce35e1.png" alt="–õ–æ–≥–æ—Ç–∏–ø –ì—É–±–∫–∏–Ω" style="height: 56px; margin-bottom: 12px;" />
              <h1 style="color: white; margin: 0; font-size: 24px;">–î–æ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤</h1>
              <p style="color: rgba(255,255,255,0.9); margin: 10px 0 0 0; font-size: 14px;">–§–∏–ª–∏–∞–ª –†–ì–£ –Ω–µ—Ñ—Ç–∏ –∏ –≥–∞–∑–∞ (–ù–ò–£) –∏–º–µ–Ω–∏ –ò.–ú. –ì—É–±–∫–∏–Ω–∞ –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç–µ</p>
            </div>
            
            <div style="background: white; padding: 40px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.1);">
              <h2 style="color: #333; text-align: center; margin-bottom: 30px;">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å</h2>
              
              <div style="background: #f8f9ff; border: 2px dashed #667eea; border-radius: 10px; padding: 30px; text-align: center; margin: 30px 0;">
                <div style="font-size: 24px; font-weight: bold; color: #667eea; letter-spacing: 4px; font-family: 'Courier New', monospace;">
                  ${newPassword}
                </div>
                <p style="color: #666; margin: 15px 0 0 0; font-size: 14px;">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É</p>
              </div>
              
              <div style="background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px; padding: 20px; margin: 30px 0;">
                <p style="margin: 0; color: #856404; font-size: 14px;">
                  <strong>‚ö†Ô∏è –í–∞–∂–Ω–æ:</strong><br>
                  ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –ø–∞—Ä–æ–ª—å –≤ –Ω–∞–¥–µ–∂–Ω–æ–º –º–µ—Å—Ç–µ<br>
                  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞<br>
                  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏<br>
                  ‚Ä¢ –ù–µ —Å–æ–æ–±—â–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
                </p>
              </div>
              
              <div style="background: #d1ecf1; border: 1px solid #bee5eb; border-radius: 8px; padding: 20px; margin: 30px 0;">
                <p style="margin: 0; color: #0c5460; font-size: 14px;">
                  <strong>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</strong><br>
                  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ —Å–∏–º–≤–æ–ª–æ–≤<br>
                  ‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–æ—Å—Ç—ã—Ö –ø–∞—Ä–æ–ª–µ–π (123456, qwerty)<br>
                  ‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø–∞—Ä–æ–ª–µ<br>
                  ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –º–µ–Ω—è–π—Ç–µ –ø–∞—Ä–æ–ª—å
                </p>
              </div>
              
              <hr style="border: none; border-top: 1px solid #eee; margin: 30px 0;">
              
              <p style="color: #999; font-size: 12px; text-align: center; margin: 0;">
                ¬© 2024 –î–æ–º –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. –§–∏–ª–∏–∞–ª –†–ì–£ –Ω–µ—Ñ—Ç–∏ –∏ –≥–∞–∑–∞ (–ù–ò–£) –∏–º–µ–Ω–∏ –ò.–ú. –ì—É–±–∫–∏–Ω–∞ –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç–µ.<br>
                –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–∏—Å—å–º–æ, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –Ω–µ–≥–æ.
              </p>
            </div>
          </div>
        `,
      }

      const info = await this.emailTransporter.sendMail(mailOptions)
      console.log(`‚úÖ Email —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${email}`)
      console.log(`üìß Message ID: ${info.messageId}`)
      console.log(`üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –≤ –ø–∏—Å—å–º–µ: ${newPassword}`)
      return { success: true, messageId: info.messageId }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º –Ω–∞', email)
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message)
      return { success: false, error: error.message }
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è email
  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
    return emailRegex.test(email)
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞)
  isValidPhone(phone) {
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ-—Ü–∏—Ñ—Ä—ã
    const cleanPhone = phone.replace(/\D/g, '')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞: +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
    const phoneRegex = /^(?:7|8)\d{10}$/
    return phoneRegex.test(cleanPhone)
  }

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É)
  normalizePhone(phone) {
    const cleanPhone = phone.replace(/\D/g, '')

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º 8XXXXXXXXXX –≤ 7XXXXXXXXXX
    if (cleanPhone.startsWith('8') && cleanPhone.length === 11) {
      return '7' + cleanPhone.substring(1)
    }

    // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7 –∏ –¥–ª–∏–Ω–∞ 11 —Ü–∏—Ñ—Ä
    if (cleanPhone.startsWith('7') && cleanPhone.length === 11) {
      return cleanPhone
    }

    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
  detectContactType(contact) {
    if (this.isValidEmail(contact)) {
      return { type: 'email', normalized: contact.toLowerCase() }
    }

    if (this.isValidPhone(contact)) {
      return { type: 'phone', normalized: this.normalizePhone(contact) }
    }

    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
  }
}

module.exports = new NotificationService()
