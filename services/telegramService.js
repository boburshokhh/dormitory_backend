const axios = require('axios')
const path = require('path')

class TelegramService {
  constructor() {
    this.botToken = process.env.TELEGRAM_BOT_TOKEN
    this.chatId = process.env.TELEGRAM_CHAT_ID
    this.isEnabled = !!(this.botToken && this.chatId)
    this.baseURL = `https://api.telegram.org/bot${this.botToken}`

    if (!this.isEnabled) {
      console.warn(
        'ü§ñ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID',
      )
    } else {
      console.log('‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã')
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –≤ —Å—Ç–∏–ª–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–æ–∫
   */
  formatErrorForTelegram(error, context = {}) {
    const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19)

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å—Ç–µ–∫–∞ –æ—à–∏–±–∫–∏
    const stackLines = error.stack ? error.stack.split('\n') : []
    const errorLine = stackLines[0] || error.message
    const relevantStackLines = stackLines.slice(1, 6) // –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ —Å—Ç–µ–∫–∞

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    let message = `üö® *–û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´ –û–ë–©–ï–ñ–ò–¢–ò–Ø*\n`
    message += `üìÖ ${timestamp}\n\n`

    // –û—Å–Ω–æ–≤–Ω–∞—è –æ—à–∏–±–∫–∞
    message += `‚ùå \`${this.escapeMarkdown(errorLine)}\`\n\n`

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
    if (context.route) {
      message += `üåê *–ú–∞—Ä—à—Ä—É—Ç:* \`${this.escapeMarkdown(context.route)}\`\n`
    }
    if (context.userId && context.userId !== 'anonymous') {
      message += `üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* \`${context.userId}\` (${context.userRole || 'unknown'})\n`
    }
    if (context.ip) {
      message += `üåç *IP:* \`${context.ip}\`\n`
    }

    // Stack trace –≤ —Å—Ç–∏–ª–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    if (relevantStackLines.length > 0) {
      message += `\nüìã *–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:*\n`
      relevantStackLines.forEach((line, index) => {
        const trimmedLine = line.trim()
        if (trimmedLine) {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
          const match =
            trimmedLine.match(/at\s+.*?\s+\(([^)]+)\)/) || trimmedLine.match(/at\s+(.+)/)
          if (match) {
            const location = match[1]
            const lineMatch = location.match(/(.+):(\d+):(\d+)/)
            if (lineMatch) {
              const [, filePath, lineNum, colNum] = lineMatch
              const fileName = path.basename(filePath)
              message += `\`${String(index + 1).padStart(3, ' ')}| ${this.escapeMarkdown(fileName)}:${lineNum}:${colNum}\`\n`
            } else {
              message += `\`${String(index + 1).padStart(3, ' ')}| ${this.escapeMarkdown(location)}\`\n`
            }
          }
        }
      })
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error.code) {
      message += `\nüîç *–ö–æ–¥ –æ—à–∏–±–∫–∏:* \`${error.code}\`\n`
    }

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if (message.length > 4000) {
      message = message.substring(0, 3950) + '\n...\n\n*–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –∏–∑-–∑–∞ –¥–ª–∏–Ω—ã*'
    }

    return message
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram
   */
  escapeMarkdown(text) {
    if (!text) return ''
    return text
      .toString()
      .replace(/\\/g, '\\\\')
      .replace(/\*/g, '\\*')
      .replace(/_/g, '\\_')
      .replace(/\[/g, '\\[')
      .replace(/\]/g, '\\]')
      .replace(/\(/g, '\\(')
      .replace(/\)/g, '\\)')
      .replace(/~/g, '\\~')
      .replace(/`/g, '\\`')
      .replace(/>/g, '\\>')
      .replace(/#/g, '\\#')
      .replace(/\+/g, '\\+')
      .replace(/-/g, '\\-')
      .replace(/=/g, '\\=')
      .replace(/\|/g, '\\|')
      .replace(/\{/g, '\\{')
      .replace(/\}/g, '\\}')
      .replace(/\./g, '\\.')
      .replace(/!/g, '\\!')
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
   */
  async sendMessage(text, options = {}) {
    if (!this.isEnabled) {
      return { success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
    }

    try {
      const response = await axios.post(`${this.baseURL}/sendMessage`, {
        chat_id: this.chatId,
        text: text,
        parse_mode: 'MarkdownV2',
        disable_web_page_preview: true,
        ...options,
      })

      return { success: true, data: response.data }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error.message)
      return { success: false, error: error.message }
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
   */
  async sendErrorNotification(error, context = {}) {
    if (!this.isEnabled) {
      return { success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
    }

    try {
      const formattedMessage = this.formatErrorForTelegram(error, context)
      return await this.sendMessage(formattedMessage)
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram:', err.message)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const fallbackMessage = `üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê*\n\n‚ùå \`${this.escapeMarkdown(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\`\n\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`
      return await this.sendMessage(fallbackMessage)
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
   */
  async sendSecurityAlert(event, details = {}) {
    if (!this.isEnabled) {
      return { success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
    }

    const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19)

    let message = `üîí *–°–û–ë–´–¢–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò*\n`
    message += `üìÖ ${timestamp}\n\n`
    message += `‚ö†Ô∏è \`${this.escapeMarkdown(event)}\`\n\n`

    if (details.ip) {
      message += `üåç *IP:* \`${details.ip}\`\n`
    }
    if (details.url) {
      message += `üåê *URL:* \`${this.escapeMarkdown(details.url)}\`\n`
    }
    if (details.method) {
      message += `üìù *–ú–µ—Ç–æ–¥:* \`${details.method}\`\n`
    }
    if (details.error) {
      message += `‚ùå *–î–µ—Ç–∞–ª–∏:* \`${this.escapeMarkdown(details.error)}\`\n`
    }

    return await this.sendMessage(message)
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö —Å–∏—Å—Ç–µ–º—ã
   */
  async sendSystemAlert(event, details = {}) {
    if (!this.isEnabled) {
      return { success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
    }

    const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19)

    let message = `‚ö° *–°–ò–°–¢–ï–ú–ù–û–ï –°–û–ë–´–¢–ò–ï*\n`
    message += `üìÖ ${timestamp}\n\n`
    message += `üîî \`${this.escapeMarkdown(event)}\`\n\n`

    Object.entries(details).forEach(([key, value]) => {
      if (value !== undefined && value !== null) {
        message += `‚Ä¢ *${this.capitalizeFirst(key)}:* \`${this.escapeMarkdown(value.toString())}\`\n`
      }
    })

    return await this.sendMessage(message)
  }

  /**
   * –î–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π
   */
  capitalizeFirst(str) {
    return str.charAt(0).toUpperCase() + str.slice(1)
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
   */
  async testConnection() {
    if (!this.isEnabled) {
      return { success: false, error: 'Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' }
    }

    try {
      const response = await axios.get(`${this.baseURL}/getMe`)
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram Bot —É—Å–ø–µ—à–Ω–æ:', response.data.result.username)

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.sendMessage(
        'ü§ñ *–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞*\n\n–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\\!',
      )

      return { success: true, data: response.data }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error.message)
      return { success: false, error: error.message }
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const telegramService = new TelegramService()

module.exports = telegramService
