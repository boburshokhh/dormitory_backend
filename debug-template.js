#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ DOCX —à–∞–±–ª–æ–Ω–æ–≤
 * –ù–∞—Ö–æ–¥–∏—Ç –∏ —É—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤ —à–∞–±–ª–æ–Ω–∞—Ö
 */

const fs = require('fs')
const path = require('path')
const { execSync } = require('child_process')
const createReport = require('docx-templates').default || require('docx-templates')
const QRCode = require('qrcode')

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m',
  bold: '\x1b[1m',
}

const log = (color, message) => console.log(`${colors[color]}${message}${colors.reset}`)
const error = (message) => log('red', `‚ùå ${message}`)
const success = (message) => log('green', `‚úÖ ${message}`)
const warning = (message) => log('yellow', `‚ö†Ô∏è  ${message}`)
const info = (message) => log('blue', `‚ÑπÔ∏è  ${message}`)
const debug = (message) => log('cyan', `üîç ${message}`)

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
const TEST_DATA = {
  fullName: '–¢–ï–°–¢–û–í –¢–ï–°–¢ –¢–ï–°–¢–û–í–ò–ß',
  docNumber: '–î–ü–°-2025/12345',
  birthDate: '2000-01-01',
  birthDateStr: '¬´01¬ª —è–Ω–≤–∞—Ä—è 2000 –≥.',
  addressFull: '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1, –∫–≤. 1',
  faculty: '–ì–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç',
  course: '1',
  groupNumber: '–ì–†-101',
  educationForm: '–æ—á–Ω–∞—è',
  basis: '–±—é–¥–∂–µ—Ç',
  dormNumber: '1',
  floor: '2',
  roomNumber: '201',
  periodFrom: '2024-09-01',
  periodFromStr: '¬´01¬ª —Å–µ–Ω—Ç—è–±—Ä—è 2024 –≥.',
  periodTo: '2025-06-30',
  periodToStr: '¬´30¬ª –∏—é–Ω—è 2025 –≥.',
  contractNumber: '123/2024',
  contractDate: '2024-08-15',
  contractDateStr: '¬´15¬ª –∞–≤–≥—É—Å—Ç–∞ 2024 –≥.',
  headName: '–ü–ï–¢–†–û–í –ü–ï–¢–† –ü–ï–¢–†–û–í–ò–ß',
  registrarName: '–°–ò–î–û–†–û–í –°–ò–î–û–† –°–ò–î–û–†–û–í–ò–ß',
}

class TemplateDebugger {
  constructor(templatePath) {
    this.templatePath = templatePath
    this.outputDir = '/tmp/template-debug'
    this.issues = []

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤—ã–≤–æ–¥–∞
    if (!fs.existsSync(this.outputDir)) {
      fs.mkdirSync(this.outputDir, { recursive: true })
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  async diagnose() {
    log('bold', '\nüß™ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DOCX –®–ê–ë–õ–û–ù–ê')
    log('bold', '==========================================\n')

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
      await this.checkFileExists()

      // 2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DOCX
      await this.analyzeDocxStructure()

      // 3. –ü–æ–∏—Å–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
      await this.findPlaceholders()

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
      await this.checkBrokenTags()

      // 5. –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π Word
      await this.checkWordFields()

      // 6. –¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∞
      await this.testRender()

      // 7. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      await this.analyzeResult()

      // 8. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      this.generateReport()
    } catch (err) {
      error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${err.message}`)
      console.error(err.stack)
    }
  }

  async checkFileExists() {
    info('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞...')

    if (!fs.existsSync(this.templatePath)) {
      throw new Error(`–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.templatePath}`)
    }

    const stats = fs.statSync(this.templatePath)
    success(`–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${this.templatePath} (${stats.size} –±–∞–π—Ç)`)
    debug(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${stats.mtime}`)
  }

  async analyzeDocxStructure() {
    info('2. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã DOCX —Ñ–∞–π–ª–∞...')

    try {
      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º DOCX –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      const extractDir = path.join(this.outputDir, 'extracted')
      execSync(`unzip -q -o "${this.templatePath}" -d "${extractDir}"`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
      const documentXml = path.join(extractDir, 'word/document.xml')
      if (fs.existsSync(documentXml)) {
        success('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ DOCX –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞')
        this.documentXml = fs.readFileSync(documentXml, 'utf8')
      } else {
        this.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç word/document.xml - —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω')
        error('–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ DOCX')
      }
    } catch (err) {
      this.issues.push(`–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏ DOCX: ${err.message}`)
      error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å DOCX: ${err.message}`)
    }
  }

  async findPlaceholders() {
    info('3. –ü–æ–∏—Å–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ...')

    if (!this.documentXml) {
      error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–∞')
      return
    }

    // –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ {var}
    const correctPlaceholders = this.documentXml.match(/\{[A-Za-z0-9_]+\}/g) || []

    // –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
    const wrongPlaceholders = [
      ...(this.documentXml.match(/%[A-Za-z0-9_]+%/g) || []),
      ...(this.documentXml.match(/\{\%[A-Za-z0-9_]+\%\}/g) || []),
      ...(this.documentXml.match(/\{\{[A-Za-z0-9_]+\}\}/g) || []),
      ...(this.documentXml.match(/\$\{[A-Za-z0-9_]+\}/g) || []),
    ]

    if (correctPlaceholders.length > 0) {
      success(`–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: ${correctPlaceholders.length}`)
      correctPlaceholders.forEach((p) => log('green', `  ‚úÖ ${p}`))

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const missingVars = correctPlaceholders
        .map((p) => p.slice(1, -1)) // —É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏
        .filter((varName) => !(varName in TEST_DATA) && varName !== 'qr')

      if (missingVars.length > 0) {
        warning(`–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö: ${missingVars.join(', ')}`)
        this.issues.push(`–ù–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: ${missingVars.join(', ')}`)
      }
    } else {
      error('–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –ù–ï –Ω–∞–π–¥–µ–Ω—ã!')
      this.issues.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã {var}')
    }

    if (wrongPlaceholders.length > 0) {
      error(`–ù–∞–π–¥–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã: ${wrongPlaceholders.length}`)
      wrongPlaceholders.forEach((p) => log('red', `  ‚ùå ${p}`))
      this.issues.push(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: ${wrongPlaceholders.join(', ')}`)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    this.foundPlaceholders = correctPlaceholders
  }

  async checkBrokenTags() {
    info('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤...')

    if (!this.documentXml) return

    // –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    const brokenPatterns = [
      /\{[^}]*<[^>]*>[^}]*\}/g, // —Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤
      /\{[^}]{1,2}</g, // –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
      />[^<]{1,2}\}/g, // –Ω–µ–æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–∫–æ–±–∫–∏
    ]

    let foundBroken = false
    brokenPatterns.forEach((pattern, index) => {
      const matches = this.documentXml.match(pattern) || []
      if (matches.length > 0) {
        foundBroken = true
        warning(`–ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ (–ø–∞—Ç—Ç–µ—Ä–Ω ${index + 1}): ${matches.length}`)
        matches.slice(0, 3).forEach((m) => log('yellow', `  ‚ö†Ô∏è  ${m}`))
        this.issues.push(`–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏: ${matches.slice(0, 3).join(', ')}`)
      }
    })

    if (!foundBroken) {
      success('–†–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }
  }

  async checkWordFields() {
    info('5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π Word (Ctrl+F9)...')

    if (!this.documentXml) return

    // –ü–æ–∏—Å–∫ –ø–æ–ª–µ–π Word
    const fieldChars = this.documentXml.match(/<w:fldChar[^>]*>/g) || []
    const fieldCodes = this.documentXml.match(/<w:instrText[^>]*>[^<]*<\/w:instrText>/g) || []

    if (fieldChars.length > 0 || fieldCodes.length > 0) {
      error(`–ù–∞–π–¥–µ–Ω—ã –ø–æ–ª—è Word: ${fieldChars.length} fldChar, ${fieldCodes.length} instrText`)
      this.issues.push('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–æ–ª—è Word –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞')
      warning('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∑–∞–º–µ–Ω–∏—Ç–µ –ø–æ–ª—è Word –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ {var}')
    } else {
      success('–ü–æ–ª—è Word –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    }
  }

  async testRender() {
    info('6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∞...')

    try {
      const templateBuffer = fs.readFileSync(this.templatePath)

      // –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞
      const qrBuffer = await QRCode.toBuffer('https://test.example.com', { width: 600, margin: 0 })

      debug('–ó–∞–ø—É—Å–∫ —Ä–µ–Ω–¥–µ—Ä–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')

      const report = await createReport({
        template: templateBuffer,
        data: TEST_DATA,
        additionalJsContext: {
          qr: () => ({ width: 5.0, height: 5.0, data: qrBuffer, extension: '.png' }),
          formatDate: (dateStr, format = '¬´DD¬ª MMMM YYYY –≥.') => {
            if (!dateStr) return ''
            const date = new Date(dateStr)
            const months = [
              '—è–Ω–≤–∞—Ä—è',
              '—Ñ–µ–≤—Ä–∞–ª—è',
              '–º–∞—Ä—Ç–∞',
              '–∞–ø—Ä–µ–ª—è',
              '–º–∞—è',
              '–∏—é–Ω—è',
              '–∏—é–ª—è',
              '–∞–≤–≥—É—Å—Ç–∞',
              '—Å–µ–Ω—Ç—è–±—Ä—è',
              '–æ–∫—Ç—è–±—Ä—è',
              '–Ω–æ—è–±—Ä—è',
              '–¥–µ–∫–∞–±—Ä—è',
            ]
            const DD = String(date.getDate()).padStart(2, '0')
            const MMMM = months[date.getMonth()]
            const YYYY = String(date.getFullYear())
            return format.replace('DD', DD).replace('MMMM', MMMM).replace('YYYY', YYYY)
          },
        },
      })

      const outputPath = path.join(this.outputDir, 'test-output.docx')
      fs.writeFileSync(outputPath, report)

      success(`–†–µ–Ω–¥–µ—Ä —É—Å–ø–µ—à–µ–Ω! –†–∞–∑–º–µ—Ä: ${report.length} –±–∞–π—Ç`)
      success(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`)

      this.renderedPath = outputPath
      this.renderSuccess = true
    } catch (err) {
      error(`–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞: ${err.message}`)
      this.issues.push(`–†–µ–Ω–¥–µ—Ä –ø—Ä–æ–≤–∞–ª–µ–Ω: ${err.message}`)
      this.renderSuccess = false
    }
  }

  async analyzeResult() {
    info('7. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–Ω–¥–µ—Ä–∞...')

    if (!this.renderSuccess || !this.renderedPath) {
      error('–ê–Ω–∞–ª–∏–∑ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω - —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ–≤–∞–ª–µ–Ω')
      return
    }

    try {
      // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const resultDir = path.join(this.outputDir, 'result')
      execSync(`unzip -q -o "${this.renderedPath}" -d "${resultDir}"`)

      const resultXml = fs.readFileSync(path.join(resultDir, 'word/document.xml'), 'utf8')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å
      const substituted = []
      const notSubstituted = []

      Object.keys(TEST_DATA).forEach((key) => {
        const value = TEST_DATA[key]
        if (resultXml.includes(value)) {
          substituted.push(key)
        } else if (resultXml.includes(`{${key}}`)) {
          notSubstituted.push(key)
        }
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º QR-–∫–æ–¥
      const hasQrPlaceholder = resultXml.includes('{qr}')
      const hasImageData = resultXml.includes('w:drawing') || resultXml.includes('pic:pic')

      success(`–ü–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${substituted.length}/${Object.keys(TEST_DATA).length}`)
      substituted.forEach((key) => log('green', `  ‚úÖ ${key}: ${TEST_DATA[key]}`))

      if (notSubstituted.length > 0) {
        error(`–ù–ï –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: ${notSubstituted.length}`)
        notSubstituted.forEach((key) => log('red', `  ‚ùå {${key}} –æ—Å—Ç–∞–ª—Å—è –∫–∞–∫ –µ—Å—Ç—å`))
        this.issues.push(`–ù–µ –ø–æ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å: ${notSubstituted.join(', ')}`)
      }

      if (hasQrPlaceholder) {
        error('QR-–∫–æ–¥ –Ω–µ –≤—Å—Ç–∞–≤–∏–ª—Å—è - –æ—Å—Ç–∞–ª—Å—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {qr}')
        this.issues.push('QR-–∫–æ–¥ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª—Å—è')
      } else if (hasImageData) {
        success('QR-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ')
      } else {
        warning('QR-–∫–æ–¥: –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ')
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
      const reportPath = path.join(this.outputDir, 'analysis-report.txt')
      const reportContent = [
        '–û–¢–ß–ï–¢ –ê–ù–ê–õ–ò–ó–ê –®–ê–ë–õ–û–ù–ê',
        '===================',
        '',
        `–§–∞–π–ª —à–∞–±–ª–æ–Ω–∞: ${this.templatePath}`,
        `–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${new Date().toISOString()}`,
        '',
        '–ù–ê–ô–î–ï–ù–ù–´–ï –ü–õ–ï–ô–°–•–û–õ–î–ï–†–´:',
        ...(this.foundPlaceholders || []).map((p) => `  ${p}`),
        '',
        '–ü–û–î–°–¢–ê–í–õ–ï–ù–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:',
        ...substituted.map((key) => `  ‚úÖ ${key}: ${TEST_DATA[key]}`),
        '',
        '–ù–ï –ü–û–î–°–¢–ê–í–õ–ï–ù–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï:',
        ...notSubstituted.map((key) => `  ‚ùå {${key}}`),
        '',
        '–ü–†–û–ë–õ–ï–ú–´:',
        ...this.issues.map((issue) => `  - ${issue}`),
        '',
      ].join('\n')

      fs.writeFileSync(reportPath, reportContent)
      info(`–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`)
    } catch (err) {
      error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${err.message}`)
    }
  }

  generateReport() {
    log('bold', '\nüìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢')
    log('bold', '=================\n')

    if (this.issues.length === 0) {
      success('üéâ –ü–†–û–ë–õ–ï–ú –ù–ï –ù–ê–ô–î–ï–ù–û! –®–∞–±–ª–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
    } else {
      error(`üö® –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú: ${this.issues.length}`)
      console.log('')
      this.issues.forEach((issue, index) => {
        log('red', `${index + 1}. ${issue}`)
      })
    }

    console.log('')
    log('bold', 'üìÅ –§–ê–ô–õ–´ –û–¢–õ–ê–î–ö–ò:')
    info(`–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${this.outputDir}`)
    if (this.renderSuccess) {
      info(`–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–Ω–¥–µ—Ä–∞: ${this.renderedPath}`)
    }

    console.log('')
    log('bold', 'üîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:')

    if (this.issues.some((i) => i.includes('–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã'))) {
      warning('1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {var} –≤–º–µ—Å—Ç–æ %var% –∏–ª–∏ {{var}}')
    }

    if (this.issues.some((i) => i.includes('–ø–æ–ª—è Word'))) {
      warning('2. –ó–∞–º–µ–Ω–∏—Ç–µ –ø–æ–ª—è Word (Ctrl+F9) –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏')
    }

    if (this.issues.some((i) => i.includes('—Ä–∞–∑–æ—Ä–≤–∞–Ω–Ω—ã–µ'))) {
      warning('3. –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∑–∞–Ω–æ–≤–æ, –Ω–µ —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º')
    }

    if (this.issues.some((i) => i.includes('QR'))) {
      warning('4. –ü–æ–º–µ—Å—Ç–∏—Ç–µ {qr} –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —è—á–µ–π–∫—É —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å—Ç—Ä–æ–∫—É')
    }

    console.log('')
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async function main() {
  const args = process.argv.slice(2)

  if (args.length === 0) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node debug-template.js <–ø—É—Ç—å-–∫-—à–∞–±–ª–æ–Ω—É.docx>')
    console.log('')
    console.log('–ü—Ä–∏–º–µ—Ä:')
    console.log('  node debug-template.js /tmp/template.docx')
    console.log('  node debug-template.js ./templates/direction.docx')
    process.exit(1)
  }

  const templatePath = args[0]
  const templateDebugger = new TemplateDebugger(templatePath)

  await templateDebugger.diagnose()
}

// –ó–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch((err) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err.message)
    process.exit(1)
  })
}

module.exports = { TemplateDebugger, TEST_DATA }
