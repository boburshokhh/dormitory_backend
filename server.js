const fs = require('fs')
const http = require('http')
const https = require('https')
const express = require('express')
const cors = require('cors')
const helmet = require('helmet')
const morgan = require('morgan')
const rateLimit = require('express-rate-limit')

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –î–û–õ–ñ–ù–´ –±—ã—Ç—å –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
process.on('uncaughtException', (error) => {
  console.error('üö® UNCAUGHT EXCEPTION - –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:')
  console.error('Error name:', error.name)
  console.error('Error message:', error.message)
  console.error('Stack trace:', error.stack)

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  if (error.code) console.error('Error code:', error.code)
  if (error.errno) console.error('Error errno:', error.errno)
  if (error.syscall) console.error('Error syscall:', error.syscall)

  process.exit(1)
})

process.on('unhandledRejection', (reason, promise) => {
  console.error('üö® UNHANDLED PROMISE REJECTION:')
  console.error('Promise:', promise)
  console.error('Reason:', reason)

  if (reason && reason.stack) {
    console.error('Stack trace:', reason.stack)
  }

  // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º
  if (process.env.NODE_ENV !== 'production') {
    console.error('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑-–∑–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞')
    process.exit(1)
  }
})

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
try {
  require('dotenv').config({ path: './.env' })
  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞:', error.message)
}

// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
function safeRequire(modulePath, description) {
  try {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ ${description}: ${modulePath}`)
    const module = require(modulePath)
    console.log(`‚úÖ ${description} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`)
    return module
  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò ${description.toUpperCase()}:`)
    console.error('–ú–æ–¥—É–ª—å:', modulePath)
    console.error('–û—à–∏–±–∫–∞:', error.message)
    console.error('–°—Ç–µ–∫:', error.stack)

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    if (error.code === 'MODULE_NOT_FOUND') {
      console.error('üí° –ú–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:')
      console.error('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É')
      console.error('   - –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞')
      console.error('   - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞')
    }

    throw error
  }
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
console.log('üìã –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞')

let db, initializeBucket, requestLogger, errorLogger, clientIPMiddleware

try {
  db = safeRequire('./config/database', 'Database config')
} catch (error) {
  console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
  process.exit(1)
}

try {
  const minioModule = safeRequire('./config/minio', 'MinIO config')
  initializeBucket = minioModule.initializeBucket
} catch (error) {
  console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å')
  initializeBucket = async () => {
    throw new Error('MinIO –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  }
}

try {
  const loggingModule = safeRequire('./middleware/logging', 'Logging middleware')
  requestLogger = loggingModule.requestLogger
  errorLogger = loggingModule.errorLogger
} catch (error) {
  console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Middleware –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
  requestLogger = (req, res, next) => next()
  errorLogger = (error, req, res, next) => next(error)
}

try {
  const clientIPModule = safeRequire('./middleware/clientIP', 'ClientIP middleware')
  clientIPMiddleware = clientIPModule.clientIPMiddleware
} catch (error) {
  console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ClientIP middleware –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
  clientIPMiddleware = (req, res, next) => next()
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
console.log('üìã –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤')

const routes = {}

// –°–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
const routesToLoad = [
  { key: 'welcome', path: './routes/welcome', description: 'Welcome routes', critical: false },
  { key: 'auth', path: './routes/auth', description: 'Auth routes', critical: true },
  { key: 'profile', path: './routes/profile', description: 'Profile routes', critical: false },
  {
    key: 'dormitories',
    path: './routes/dormitories',
    description: 'Dormitories routes',
    critical: false,
  },
  { key: 'floors', path: './routes/floors', description: 'Floors routes', critical: false },
  { key: 'blocks', path: './routes/blocks', description: 'Blocks routes', critical: false },
  { key: 'rooms', path: './routes/rooms', description: 'Rooms routes', critical: false },
  { key: 'beds', path: './routes/beds', description: 'Beds routes', critical: false },
  {
    key: 'applications',
    path: './routes/applications',
    description: 'Applications routes',
    critical: false,
  },
  { key: 'users', path: './routes/users', description: 'Users routes', critical: false },
  {
    key: 'structure',
    path: './routes/structure',
    description: 'Structure routes',
    critical: false,
  },
  { key: 'groups', path: './routes/groups', description: 'Groups routes', critical: false },
  { key: 'files', path: './routes/files', description: 'Files routes', critical: false },
  {
    key: 'documents',
    path: './routes/documents',
    description: 'Documents routes',
    critical: false,
  },
  {
    key: 'testTelegram',
    path: './routes/test-telegram',
    description: 'Telegram Test routes',
    critical: false,
  },
]

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ä—à—Ä—É—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
for (const route of routesToLoad) {
  try {
    console.log(`üîç –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å: ${route.description}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(route.path + '.js')) {
      console.warn(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${route.path}.js`)
      if (route.critical) {
        throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${route.path}`)
      }
      continue
    }

    routes[route.key] = safeRequire(route.path, route.description)
    console.log(`‚úÖ –ú–∞—Ä—à—Ä—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: ${route.key}`)
  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ú–ê–†–®–†–£–¢–ê ${route.key.toUpperCase()}:`)
    console.error('–ü—É—Ç—å:', route.path)
    console.error('–û—à–∏–±–∫–∞:', error.message)
    console.error('–°—Ç–µ–∫:', error.stack)

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
    if (error.message.includes('Cannot resolve module')) {
      console.error('üí° –ü—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –º–æ–¥—É–ª—è')
    } else if (error.message.includes('SyntaxError')) {
      console.error('üí° –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ñ–∞–π–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞')
    } else if (error.message.includes('ReferenceError')) {
      console.error('üí° –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π')
    }

    if (route.critical) {
      console.error('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
      process.exit(1)
    } else {
      console.warn(`‚ö†Ô∏è –ù–µ–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ä—à—Ä—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω: ${route.key}`)
      routes[route.key] = null
    }
  }
}

console.log('üìã –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
console.log(
  '–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤:',
  Object.keys(routes).filter((key) => routes[key] !== null).length,
)

// Environment variables validation
const requiredEnvVars = ['DB_NAME', 'DB_USER', 'DB_PASSWORD']
const missingEnvVars = requiredEnvVars.filter((varName) => !process.env[varName])
if (missingEnvVars.length > 0) {
  console.error(`‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missingEnvVars.join(', ')}`)
  process.exit(1)
}

const app = express()
const PORT = process.env.PORT || 3000
const HTTPS_PORT = process.env.HTTPS_PORT || 443
const isProduction = process.env.NODE_ENV === 'production'

console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

// Trust proxy settings
if (isProduction) {
  app.set('trust proxy', ['127.0.0.1', '::1', '192.168.1.253', '90.156.198.42'])
} else {
  app.set('trust proxy', ['127.0.0.1', '::1'])
}

// SSL Configuration
let sslOptions = null
if (isProduction) {
  try {
    const keyPath = process.env.SSL_KEY_PATH || '/etc/ssl/certs/api.dormitory.gubkin.uz/privkey.pem'
    const certPath = process.env.SSL_CERT_PATH || '/etc/ssl/certs/api.dormitory.gubkin.uz/cert.pem'
    const caPath = process.env.SSL_CA_PATH || '/etc/ssl/certs/api.dormitory.gubkin.uz/chain.pem'

    if (fs.existsSync(keyPath) && fs.existsSync(certPath)) {
      sslOptions = {
        key: fs.readFileSync(keyPath),
        cert: fs.readFileSync(certPath),
      }

      if (fs.existsSync(caPath)) {
        sslOptions.ca = fs.readFileSync(caPath)
      }
      console.log('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
    } else {
      console.warn('‚ö†Ô∏è SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ HTTP')
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:', error.message)
  }
}

// CORS configuration
const allowedOrigins = [
  'http://localhost:5173',
  'http://localhost:3000',
  'https://dormitory-gubkin.netlify.app',
  'https://dormitory.gubkin.uz',
  'https://9e4890cdc062.ngrok-free.app',
  'http://192.168.1.253',
  'http://90.156.198.42',
  process.env.FRONTEND_URL,
].filter(Boolean)

console.log('üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware')

// Security middleware
try {
  app.use(
    helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'"],
          scriptSrc: ["'self'"],
          imgSrc: ["'self'", 'data:', 'https:'],
        },
      },
    }),
  )
  console.log('‚úÖ Helmet middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Helmet:', error.message)
}

try {
  app.use(
    cors({
      origin: isProduction ? allowedOrigins : true,
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
      allowedHeaders: [
        'Content-Type',
        'Authorization',
        'X-Requested-With',
        'Cache-Control',
        'Pragma',
      ],
    }),
  )
  console.log('‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ CORS:', error.message)
}

// Logging middleware
try {
  app.use(morgan(isProduction ? 'combined' : 'dev'))
  console.log('‚úÖ Morgan logger –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Morgan:', error.message)
}

// Body parsing middleware
try {
  app.use(
    express.json({
      limit: '10mb',
      verify: (req, res, buf) => {
        try {
          JSON.parse(buf)
        } catch (e) {
          res.status(400).json({ error: 'Invalid JSON format' })
          throw new Error('Invalid JSON')
        }
      },
    }),
  )
  app.use(express.urlencoded({ extended: true, limit: '10mb' }))
  console.log('‚úÖ Body parsing middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ body parsing:', error.message)
}

// Rate limiting
try {
  const limiter = rateLimit({
    windowMs: 15 * 60 * 1000,
    max: isProduction ? 1000 : 10000,
    message: {
      error: 'Too many requests from this IP, please try again later.',
      retryAfter: '15 minutes',
    },
    standardHeaders: true,
    legacyHeaders: false,
    keyGenerator: (req) => {
      const forwardedFor = req.headers['x-forwarded-for']
      if (forwardedFor && app.get('trust proxy')) {
        const clientIP = forwardedFor.split(',')[0].trim()
        return clientIP
      }
      return req.connection.remoteAddress || req.ip || 'unknown'
    },
    skip: (req) => {
      return req.path === '/api/health'
    },
    skipSuccessfulRequests: false,
    skipFailedRequests: false,
  })
  app.use(limiter)
  console.log('‚úÖ Rate limiting –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting:', error.message)
}

// Static files
const uploadsPath = isProduction ? '/var/www/uploads' : 'uploads'
if (fs.existsSync(uploadsPath)) {
  try {
    app.use(
      '/uploads',
      express.static(uploadsPath, {
        maxAge: '1d',
        etag: true,
        lastModified: true,
      }),
    )
    console.log('‚úÖ Static files –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:', uploadsPath)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ static files:', error.message)
  }
} else {
  console.warn(`‚ö†Ô∏è –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${uploadsPath}`)
}

// Custom middleware
try {
  app.use(clientIPMiddleware)
  app.use(requestLogger)
  console.log('‚úÖ Custom middleware –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ custom middleware:', error.message)
}

// Health check
app.get('/api/health', async (req, res) => {
  console.log('üè• Health check –∑–∞–ø—Ä–æ—à–µ–Ω')
  const healthCheck = {
    status: 'OK',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    uptime: process.uptime(),
  }

  try {
    if (db && db.pool) {
      await db.pool.query('SELECT 1')
      healthCheck.database = 'connected'
    } else {
      healthCheck.database = 'not_configured'
    }
  } catch (error) {
    healthCheck.database = 'disconnected'
    healthCheck.status = 'WARNING'
    console.error('Health check - database error:', error.message)
  }

  const statusCode = healthCheck.status === 'OK' ? 200 : 503
  res.status(statusCode).json(healthCheck)
})

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
console.log('üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é')

const routeMappings = [
  { path: '/', route: 'welcome', name: 'Welcome' },
  { path: '/api/auth', route: 'auth', name: 'Auth' },
  { path: '/api/profile', route: 'profile', name: 'Profile' },
  { path: '/api/dormitories', route: 'dormitories', name: 'Dormitories' },
  { path: '/api/floors', route: 'floors', name: 'Floors' },
  { path: '/api/blocks', route: 'blocks', name: 'Blocks' },
  { path: '/api/rooms', route: 'rooms', name: 'Rooms' },
  { path: '/api/beds', route: 'beds', name: 'Beds' },
  { path: '/api/applications', route: 'applications', name: 'Applications' },
  { path: '/api/users', route: 'users', name: 'Users' },
  { path: '/api/structure', route: 'structure', name: 'Structure' },
  { path: '/api/groups', route: 'groups', name: 'Groups' },
  { path: '/api/files', route: 'files', name: 'Files' },
  { path: '/api/documents', route: 'documents', name: 'Documents' },
  { path: '/api/test', route: 'testTelegram', name: 'Telegram Test' },
]

for (const mapping of routeMappings) {
  try {
    if (routes[mapping.route]) {
      console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ${mapping.name} routes –∫ ${mapping.path}`)
      app.use(mapping.path, routes[mapping.route])
      console.log(`‚úÖ ${mapping.name} routes –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ`)
    } else {
      console.warn(`‚ö†Ô∏è ${mapping.name} routes –ø—Ä–æ–ø—É—â–µ–Ω—ã (–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)`)
    }
  } catch (error) {
    console.error(`‚ùå –û–®–ò–ë–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ${mapping.name.toUpperCase()} ROUTES:`)
    console.error('–ü—É—Ç—å:', mapping.path)
    console.error('–û—à–∏–±–∫–∞:', error.message)
    console.error('–°—Ç–µ–∫:', error.stack)
  }
}

// 404 handler
app.use('*', (req, res) => {
  console.log(`‚ùì 404 - –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${req.method} ${req.originalUrl}`)
  res.status(404).json({
    error: 'Route not found',
    path: req.originalUrl,
    method: req.method,
    timestamp: new Date().toISOString(),
  })
})

// Error handling middleware
app.use(errorLogger)
app.use((error, req, res, next) => {
  console.error('üö® EXPRESS ERROR HANDLER:')
  console.error('URL:', req.originalUrl)
  console.error('Method:', req.method)
  console.error('Error:', error.message)
  console.error('Stack:', error.stack)

  // Handle specific error types
  if (error.type === 'entity.parse.failed') {
    return res.status(400).json({ error: 'Invalid JSON format' })
  }

  if (error.type === 'entity.too.large') {
    return res.status(413).json({ error: 'Request payload too large' })
  }

  // Default error response
  const statusCode = error.statusCode || error.status || 500
  const response = {
    error: statusCode === 500 ? 'Internal server error' : error.message,
    timestamp: new Date().toISOString(),
    path: req.originalUrl,
  }

  if (process.env.NODE_ENV === 'development') {
    response.details = error.message
    response.stack = error.stack
  }

  if (!res.headersSent) {
    res.status(statusCode).json(response)
  }
})

// –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
async function checkDatabaseConnection() {
  try {
    console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    if (!db || !db.pool) {
      throw new Error('Database pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    }
    await db.pool.query('SELECT 1')
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message)
    return false
  }
}

async function initializeMinIO() {
  try {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO')
    await initializeBucket()
    console.log('‚úÖ MinIO –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MinIO:', error.message)
    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å')
  }
}

// Graceful shutdown
async function gracefulShutdown(signal) {
  console.log(`\nüì¢ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}, –Ω–∞—á–∏–Ω–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`)

  const shutdownTimeout = setTimeout(() => {
    console.error('‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞')
    process.exit(1)
  }, 30000)

  try {
    if (global.httpServer) {
      await new Promise((resolve) => {
        global.httpServer.close(resolve)
      })
      console.log('‚úÖ HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç')
    }

    if (global.httpsServer) {
      await new Promise((resolve) => {
        global.httpsServer.close(resolve)
      })
      console.log('‚úÖ HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç')
    }

    if (db && db.pool) {
      await db.pool.end()
      console.log('‚úÖ –ü—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç')
    }

    clearTimeout(shutdownTimeout)
    console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
    process.exit(0)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', error)
    clearTimeout(shutdownTimeout)
    process.exit(1)
  }
}

// Signal handlers
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'))
process.on('SIGINT', () => gracefulShutdown('SIGINT'))

// Server startup
async function startServer() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞')
    console.log('–û–∫—Ä—É–∂–µ–Ω–∏–µ:', process.env.NODE_ENV || 'development')
    console.log('–ü–æ—Ä—Ç:', PORT)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const dbConnected = await checkDatabaseConnection()
    if (!dbConnected && isProduction) {
      console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ')
      process.exit(1)
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º MinIO
    await initializeMinIO()

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const telegramService = safeRequire('./services/telegramService', 'Telegram Service')
    if (telegramService) {
      console.log('ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...')
      try {
        await telegramService.testConnection()
      } catch (error) {
        console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram:', error.message)
      }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã
    if (sslOptions && isProduction) {
      // HTTP —Ä–µ–¥–∏—Ä–µ–∫—Ç
      const httpApp = express()
      httpApp.use((req, res) => {
        res.redirect(301, `https://${req.headers.host}${req.url}`)
      })

      global.httpServer = http.createServer(httpApp)
      global.httpServer.listen(PORT, '0.0.0.0', () => {
        console.log(`üîÑ HTTP redirect —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
      })

      // HTTPS —Å–µ—Ä–≤–µ—Ä
      global.httpsServer = https.createServer(sslOptions, app)
      global.httpsServer.listen(HTTPS_PORT, '0.0.0.0', () => {
        console.log(`üöÄ HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${HTTPS_PORT}`)
      })
    } else {
      // HTTP —Å–µ—Ä–≤–µ—Ä
      global.httpServer = http.createServer(app)
      global.httpServer.listen(PORT, '0.0.0.0', () => {
        console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
        if (isProduction) {
          console.log('‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –±–µ–∑ HTTPS')
        }
      })
    }

    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω')
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ó–ê–ü–£–°–ö–ê –°–ï–†–í–ï–†–ê:')
    console.error('–û—à–∏–±–∫–∞:', error.message)
    console.error('–°—Ç–µ–∫:', error.stack)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  startServer().catch((error) => {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä:', error)
    process.exit(1)
  })
}

module.exports = app
