const express = require('express')
const cors = require('cors')
const helmet = require('helmet')
const morgan = require('morgan')
const rateLimit = require('express-rate-limit')
require('dotenv').config({ path: './.env' })

const db = require('./config/database')
const { initializeBucket } = require('./config/minio')
const { requestLogger, errorLogger } = require('./middleware/logging')
const { clientIPMiddleware } = require('./middleware/clientIP')
const welcomeRoutes = require('./routes/welcome')
const authRoutes = require('./routes/auth')
const profileRoutes = require('./routes/profile')
const dormitoriesRoutes = require('./routes/dormitories')
const floorsRoutes = require('./routes/floors')
const blocksRoutes = require('./routes/blocks')
const roomsRoutes = require('./routes/rooms')
const bedsRoutes = require('./routes/beds')
const applicationsRoutes = require('./routes/applications')
const usersRoutes = require('./routes/users')
const structureRoutes = require('./routes/structure')
const groupsRoutes = require('./routes/groups')
const filesRoutes = require('./routes/files')

const app = express()
const PORT = process.env.PORT || 3000

// Middleware
app.use(helmet()) // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤

// CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–æ–º–µ–Ω–æ–≤
const allowedOrigins = [
  'http://localhost:5173', // Development
  'http://localhost:3000', // Local development
  'https://dormitory-gubkin.netlify.app', // Production Netlify
  'https://dormitory.gubkin.uz', // Production domain
  'https://9e4890cdc062.ngrok-free.app', // ngrok tunnel
  process.env.FRONTEND_URL, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–º–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
].filter(Boolean)

app.use(
  cors({
    origin: function (origin, callback) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, Postman)
      if (!origin) return callback(null, true)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –¥–æ–º–µ–Ω–∞–º–∏
      if (allowedOrigins.indexOf(origin) !== -1) {
        callback(null, true)
        return
      }

      // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –ø–æ–¥–¥–æ–º–µ–Ω—ã gubkin.uz
      if (origin && origin.match(/^https?:\/\/.*\.gubkin\.uz$/)) {
        callback(null, true)
        return
      }

      // –†–∞–∑—Ä–µ—à–∞–µ–º localhost –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      if (origin && origin.match(/^https?:\/\/localhost(:\d+)?$/)) {
        callback(null, true)
        return
      }

      console.log(`‚ùå CORS blocked origin: ${origin}`)
      callback(new Error('Not allowed by CORS'))
    },
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],
    allowedHeaders: [
      'Origin',
      'X-Requested-With',
      'Content-Type',
      'Accept',
      'Authorization',
      'Cache-Control',
      'Pragma',
    ],
    exposedHeaders: ['Authorization'],
    optionsSuccessStatus: 200, // –î–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  }),
)
app.use(morgan('combined')) // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏
app.use((req, res, next) => {
  const origin = req.headers.origin
  if (origin) {
    res.header('Access-Control-Allow-Origin', origin)
  }
  res.header('Access-Control-Allow-Credentials', 'true')
  res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,PATCH,OPTIONS')
  res.header(
    'Access-Control-Allow-Headers',
    'Origin, X-Requested-With, Content-Type, Accept, Authorization, Cache-Control, Pragma',
  )

  if (req.method === 'OPTIONS') {
    res.sendStatus(200)
  } else {
    next()
  }
})

app.use(express.json({ limit: '10mb' }))
app.use(express.urlencoded({ extended: true }))

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
const isProduction = process.env.NODE_ENV === 'production'
const uploadsPath = isProduction ? '/var/www/uploads' : 'uploads'

app.use('/uploads', express.static(uploadsPath))

// Rate limiting - –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 1000, // –º–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP (—É–≤–µ–ª–∏—á–µ–Ω–æ)
  message: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —ç—Ç–æ–≥–æ IP, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
  standardHeaders: true,
  legacyHeaders: false,
})
app.use(limiter)

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
app.use(async (req, res, next) => {
  try {
    await db.query('SELECT 1')
    next()
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error)
    res.status(503).json({ error: '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' })
  }
})

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
app.use(clientIPMiddleware)

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(requestLogger)

// Routes
app.use('/', welcomeRoutes) // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
app.use('/api/auth', authRoutes)
app.use('/api/profile', profileRoutes)
app.use('/api/dormitories', dormitoriesRoutes)
app.use('/api/floors', floorsRoutes)
app.use('/api/blocks', blocksRoutes)
app.use('/api/rooms', roomsRoutes)
app.use('/api/beds', bedsRoutes)
app.use('/api/applications', applicationsRoutes)
app.use('/api/users', usersRoutes)
app.use('/api/structure', structureRoutes)
app.use('/api/groups', groupsRoutes)
app.use('/api/files', filesRoutes)

// Health check
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
  })
})

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' })
})

// Global error handler
app.use(errorLogger)
app.use((error, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error)

  if (error.type === 'entity.parse.failed') {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON' })
  }

  res.status(500).json({
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    ...(process.env.NODE_ENV === 'development' && { details: error.message }),
  })
})

// Graceful shutdown
process.on('SIGTERM', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...')
  try {
    await db.pool.end()
    console.log('‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç')
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞:', error)
  }
  process.exit(0)
})

process.on('SIGINT', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Ä–≤–µ—Ä...')
  try {
    await db.pool.end()
    console.log('‚úÖ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç')
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞:', error)
  }
  process.exit(0)
})

app.listen(PORT, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`)
  console.log(`üîó Database: ${process.env.DB_NAME || 'gubkin_dormitory'}`)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MinIO
  try {
    await initializeBucket()
    console.log(
      `üì¶ MinIO bucket –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${process.env.MINIO_BUCKET_NAME || 'gubkin-dormitory'}`,
    )
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MinIO:', error)
  }
})

module.exports = app
