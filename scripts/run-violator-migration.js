const { query } = require('../config/database')
const fs = require('fs')
const path = require('path')

async function runViolatorMigration() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è is_violator...')

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, '../migrations/add_violator_status_to_users.sql')
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')

    console.log('üìÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –º–∏–≥—Ä–∞—Ü–∏–∏...')

    // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    await query(migrationSQL)

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
    console.log('üìä –ü–æ–ª–µ is_violator –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É users')
    console.log('üîç –ò–Ω–¥–µ–∫—Å idx_users_is_violator —Å–æ–∑–¥–∞–Ω')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ
    const checkResult = await query(`
      SELECT column_name, data_type, column_default, is_nullable
      FROM information_schema.columns 
      WHERE table_name = 'users' AND column_name = 'is_violator'
    `)

    if (checkResult.rows.length > 0) {
      const column = checkResult.rows[0]
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª–µ is_violator –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ users')
      console.log(`   –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${column.data_type}`)
      console.log(`   –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${column.column_default}`)
      console.log(`   –ú–æ–∂–µ—Ç –±—ã—Ç—å NULL: ${column.is_nullable}`)
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª–µ is_violator –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ users')
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å
    const indexResult = await query(`
      SELECT indexname, indexdef
      FROM pg_indexes 
      WHERE tablename = 'users' AND indexname = 'idx_users_is_violator'
    `)

    if (indexResult.rows.length > 0) {
      console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏–Ω–¥–µ–∫—Å idx_users_is_violator —Å–æ–∑–¥–∞–Ω')
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞: –∏–Ω–¥–µ–∫—Å idx_users_is_violator –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –∞—É–¥–∏—Ç–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
    console.log('üßæ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–∞ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π...')
    const auditPath = path.join(__dirname, '../migrations/create_user_violation_audit.sql')
    const auditSQL = fs.readFileSync(auditPath, 'utf8')
    await query(auditSQL)
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_violation_audit —Å–æ–∑–¥–∞–Ω–∞ (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞)')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runViolatorMigration()
  .then(() => {
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
