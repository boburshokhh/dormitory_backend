const { query } = require('../config/database')
const fs = require('fs')
const path = require('path')

async function runQueueMigration() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏...')

  try {
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(__dirname, '../migrations/add_queue_system.sql')
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8')

    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = migrationSQL
      .split(';')
      .map((cmd) => cmd.trim())
      .filter((cmd) => cmd.length > 0 && !cmd.startsWith('--'))

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${commands.length} –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è`)

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i]
      console.log(`\n‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${commands.length}...`)

      try {
        await query(command)
        console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
      } catch (error) {
        // –ï—Å–ª–∏ –ø–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫—É
        if (error.message.includes('already exists') || error.message.includes('duplicate')) {
          console.log('‚ö†Ô∏è  –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...')
        } else {
          throw error
        }
      }
    }

    console.log('\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏...')

    const checkResult = await query(`
      SELECT 
        COUNT(*) as total_applications,
        COUNT(CASE WHEN is_queue = true THEN 1 END) as in_queue,
        COUNT(CASE WHEN is_queue = false THEN 1 END) as out_of_queue,
        COUNT(CASE WHEN queue_position IS NOT NULL THEN 1 END) as with_position
      FROM applications
    `)

    const stats = checkResult.rows[0]
    console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:`)
    console.log(`   - –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${stats.total_applications}`)
    console.log(`   - –í –æ—á–µ—Ä–µ–¥–∏: ${stats.in_queue}`)
    console.log(`   - –í–Ω–µ –æ—á–µ—Ä–µ–¥–∏: ${stats.out_of_queue}`)
    console.log(`   - –° –ø–æ–∑–∏—Ü–∏–µ–π –≤ –æ—á–µ—Ä–µ–¥–∏: ${stats.with_position}`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
runQueueMigration()
  .then(() => {
    console.log('\n‚ú® –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
